
AVRASM ver. 2.1.30  D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm Fri Feb 03 20:53:35 2023

D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm(1415): warning: Register r4 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm(1416): warning: Register r5 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm(1417): warning: Register r6 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm(1418): warning: Register r7 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm(1419): warning: Register r9 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm(1420): warning: Register r8 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Timers8535\Debug\List\timers.asm(1421): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.50 Evaluation
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _ticks=R6
                 	.DEF _ticks_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c02d      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e c068      	RJMP _adc_isr
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 c046      	RJMP _timer0_comp_isr
000014 cfeb      	RJMP 0x00
                 
                 _tbl10_G101:
000015 2710
000016 03e8
000017 0064
000018 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000019 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00001a 1000
00001b 0100
00001c 0010
00001d 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00001e 0000
00001f 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000020 6548
000021 6c6c
000022 006f      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x0
                 _0x2000003:
000023 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000024 0004      	.DW  0x04
000025 0004      	.DW  0x04
000026 003c      	.DW  __REG_VARS*2
                 
000027 0006      	.DW  0x06
000028 00e0      	.DW  _0x6
000029 0040      	.DW  _0x0*2
                 
00002a 0002      	.DW  0x02
00002b 00ff      	.DW  __base_y_G100
00002c 0046      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00002d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00002e 94f8      	CLI
00002f 27ee      	CLR  R30
000030 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000031 e0f1      	LDI  R31,1
000032 bffb      	OUT  GICR,R31
000033 bfeb      	OUT  GICR,R30
000034 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000035 e08d      	LDI  R24,(14-2)+1
000036 e0a2      	LDI  R26,2
000037 27bb      	CLR  R27
                 __CLEAR_REG:
000038 93ed      	ST   X+,R30
000039 958a      	DEC  R24
00003a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003c e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003e 93ed      	ST   X+,R30
00003f 9701      	SBIW R24,1
000040 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000041 e4e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000042 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000043 9185      	LPM  R24,Z+
000044 9195      	LPM  R25,Z+
000045 9700      	SBIW R24,0
000046 f061      	BREQ __GLOBAL_INI_END
000047 91a5      	LPM  R26,Z+
000048 91b5      	LPM  R27,Z+
000049 9005      	LPM  R0,Z+
00004a 9015      	LPM  R1,Z+
00004b 01bf      	MOVW R22,R30
00004c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00004d 9005      	LPM  R0,Z+
00004e 920d      	ST   X+,R0
00004f 9701      	SBIW R24,1
000050 f7e1      	BRNE __GLOBAL_INI_LOOP
000051 01fb      	MOVW R30,R22
000052 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000053 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000054 bfed      	OUT  SPL,R30
000055 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000056 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000057 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000058 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000059 c04b      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;interrupt [20] void timer0_comp_isr(void)
                 ; 0000 0023 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
00005a 93ea      	ST   -Y,R30
00005b 93fa      	ST   -Y,R31
00005c b7ef      	IN   R30,SREG
00005d 93ea      	ST   -Y,R30
                 ; 0000 0024 // Place your code here
                 ; 0000 0025 count++;
00005e 01f2      	MOVW R30,R4
00005f 9631      	ADIW R30,1
000060 012f      	MOVW R4,R30
                 ; 0000 0026 if (count == 3) {
000061 e0e3      	LDI  R30,LOW(3)
000062 e0f0      	LDI  R31,HIGH(3)
000063 15e4      	CP   R30,R4
000064 05f5      	CPC  R31,R5
000065 f461      	BRNE _0x3
                 ; 0000 0027 count = 0;
000066 2444      	CLR  R4
000067 2455      	CLR  R5
                 ; 0000 0028 ticks++;
000068 01f3      	MOVW R30,R6
000069 9631      	ADIW R30,1
00006a 013f      	MOVW R6,R30
                 ; 0000 0029 if (ticks == 50) {ticks = 0;}
00006b e3e2      	LDI  R30,LOW(50)
00006c e0f0      	LDI  R31,HIGH(50)
00006d 15e6      	CP   R30,R6
00006e 05f7      	CPC  R31,R7
00006f f411      	BRNE _0x4
000070 2466      	CLR  R6
000071 2477      	CLR  R7
                 ; 0000 002A }
                 _0x4:
                 ; 0000 002B }
                 _0x3:
000072 91e9      	LD   R30,Y+
000073 bfef      	OUT  SREG,R30
000074 91f9      	LD   R31,Y+
000075 91e9      	LD   R30,Y+
000076 9518      	RETI
                 ; .FEND
                 ;interrupt [15] void adc_isr(void)
                 ; 0000 0036 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000077 938a      	ST   -Y,R24
000078 93aa      	ST   -Y,R26
000079 93ba      	ST   -Y,R27
00007a 93ea      	ST   -Y,R30
00007b 93fa      	ST   -Y,R31
00007c b7ef      	IN   R30,SREG
00007d 93ea      	ST   -Y,R30
                 ; 0000 0037 static unsigned char input_index=0;
                 ; 0000 0038 // Read the AD conversion result
                 ; 0000 0039 adc_data[input_index]=ADCW;
00007e 91e0 00ee 	LDS  R30,_input_index_S0000001000
000080 eea6      	LDI  R26,LOW(_adc_data)
000081 e0b0      	LDI  R27,HIGH(_adc_data)
000082 e0f0      	LDI  R31,0
000083 0fee      	LSL  R30
000084 1fff      	ROL  R31
000085 0fae      	ADD  R26,R30
000086 1fbf      	ADC  R27,R31
000087 b1e4      	IN   R30,0x4
000088 b1f5      	IN   R31,0x4+1
000089 93ed      	ST   X+,R30
00008a 93fc      	ST   X,R31
                 ; 0000 003A // Select next ADC input
                 ; 0000 003B if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
00008b 91a0 00ee 	LDS  R26,_input_index_S0000001000
00008d 5faf      	SUBI R26,-LOW(1)
00008e 93a0 00ee 	STS  _input_index_S0000001000,R26
000090 30a4      	CPI  R26,LOW(0x4)
000091 f018      	BRLO _0x5
                 ; 0000 003C input_index=0;
000092 e0e0      	LDI  R30,LOW(0)
000093 93e0 00ee 	STS  _input_index_S0000001000,R30
                 ; 0000 003D ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x5:
000095 91e0 00ee 	LDS  R30,_input_index_S0000001000
000097 5ce0      	SUBI R30,-LOW(64)
000098 b9e7      	OUT  0x7,R30
                 ; 0000 003E // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 003F delay_us(10);
                +
000099 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
00009a 958a     +DEC R24
00009b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 0040 // Start the AD conversion
                 ; 0000 0041 ADCSRA|=(1<<ADSC);
00009c 9a36      	SBI  0x6,6
                 ; 0000 0042 }
00009d 91e9      	LD   R30,Y+
00009e bfef      	OUT  SREG,R30
00009f 91f9      	LD   R31,Y+
0000a0 91e9      	LD   R30,Y+
0000a1 91b9      	LD   R27,Y+
0000a2 91a9      	LD   R26,Y+
0000a3 9189      	LD   R24,Y+
0000a4 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 0049 {
                 _main:
                 ; .FSTART _main
                 ; 0000 004A // Declare your local variables here
                 ; 0000 004B 
                 ; 0000 004C // Input/Output Ports initialization
                 ; 0000 004D // Port A initialization
                 ; 0000 004E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004F DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bbea      	OUT  0x1A,R30
                 ; 0000 0050 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0051 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000a7 bbeb      	OUT  0x1B,R30
                 ; 0000 0052 
                 ; 0000 0053 // Port B initialization
                 ; 0000 0054 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0055 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000a8 bbe7      	OUT  0x17,R30
                 ; 0000 0056 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0057 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000a9 bbe8      	OUT  0x18,R30
                 ; 0000 0058 
                 ; 0000 0059 // Port C initialization
                 ; 0000 005A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005B DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000aa bbe4      	OUT  0x14,R30
                 ; 0000 005C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005D PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000ab bbe5      	OUT  0x15,R30
                 ; 0000 005E 
                 ; 0000 005F // Port D initialization
                 ; 0000 0060 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0061 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000ac bbe1      	OUT  0x11,R30
                 ; 0000 0062 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0063 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000ad bbe2      	OUT  0x12,R30
                 ; 0000 0064 
                 ; 0000 0065 // Timer/Counter 0 initialization
                 ; 0000 0066 // Clock source: System Clock
                 ; 0000 0067 // Clock value: 15.625 kHz
                 ; 0000 0068 // Mode: CTC top=OCR0
                 ; 0000 0069 // OC0 output: Disconnected
                 ; 0000 006A // Timer Period: 16 ms
                 ; 0000 006B TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (1<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
0000ae e0ed      	LDI  R30,LOW(13)
0000af bfe3      	OUT  0x33,R30
                 ; 0000 006C TCNT0=0x00;
0000b0 e0e0      	LDI  R30,LOW(0)
0000b1 bfe2      	OUT  0x32,R30
                 ; 0000 006D OCR0=0xF9;
0000b2 efe9      	LDI  R30,LOW(249)
0000b3 bfec      	OUT  0x3C,R30
                 ; 0000 006E 
                 ; 0000 006F // Timer/Counter 1 initialization
                 ; 0000 0070 // Clock source: System Clock
                 ; 0000 0071 // Clock value: Timer1 Stopped
                 ; 0000 0072 // Mode: Normal top=0xFFFF
                 ; 0000 0073 // OC1A output: Disconnected
                 ; 0000 0074 // OC1B output: Disconnected
                 ; 0000 0075 // Noise Canceler: Off
                 ; 0000 0076 // Input Capture on Falling Edge
                 ; 0000 0077 // Timer1 Overflow Interrupt: Off
                 ; 0000 0078 // Input Capture Interrupt: Off
                 ; 0000 0079 // Compare A Match Interrupt: Off
                 ; 0000 007A // Compare B Match Interrupt: Off
                 ; 0000 007B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 bdef      	OUT  0x2F,R30
                 ; 0000 007C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000b6 bdee      	OUT  0x2E,R30
                 ; 0000 007D TCNT1H=0x00;
0000b7 bded      	OUT  0x2D,R30
                 ; 0000 007E TCNT1L=0x00;
0000b8 bdec      	OUT  0x2C,R30
                 ; 0000 007F ICR1H=0x00;
0000b9 bde7      	OUT  0x27,R30
                 ; 0000 0080 ICR1L=0x00;
0000ba bde6      	OUT  0x26,R30
                 ; 0000 0081 OCR1AH=0x00;
0000bb bdeb      	OUT  0x2B,R30
                 ; 0000 0082 OCR1AL=0x00;
0000bc bdea      	OUT  0x2A,R30
                 ; 0000 0083 OCR1BH=0x00;
0000bd bde9      	OUT  0x29,R30
                 ; 0000 0084 OCR1BL=0x00;
0000be bde8      	OUT  0x28,R30
                 ; 0000 0085 
                 ; 0000 0086 // Timer/Counter 2 initialization
                 ; 0000 0087 // Clock source: System Clock
                 ; 0000 0088 // Clock value: Timer2 Stopped
                 ; 0000 0089 // Mode: Normal top=0xFF
                 ; 0000 008A // OC2 output: Disconnected
                 ; 0000 008B ASSR=0<<AS2;
0000bf bde2      	OUT  0x22,R30
                 ; 0000 008C TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000c0 bde5      	OUT  0x25,R30
                 ; 0000 008D TCNT2=0x00;
0000c1 bde4      	OUT  0x24,R30
                 ; 0000 008E OCR2=0x00;
0000c2 bde3      	OUT  0x23,R30
                 ; 0000 008F 
                 ; 0000 0090 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0091 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
0000c3 e0e2      	LDI  R30,LOW(2)
0000c4 bfe9      	OUT  0x39,R30
                 ; 0000 0092 
                 ; 0000 0093 // External Interrupt(s) initialization
                 ; 0000 0094 // INT0: Off
                 ; 0000 0095 // INT1: Off
                 ; 0000 0096 // INT2: Off
                 ; 0000 0097 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 bfe5      	OUT  0x35,R30
                 ; 0000 0098 MCUCSR=(0<<ISC2);
0000c7 bfe4      	OUT  0x34,R30
                 ; 0000 0099 
                 ; 0000 009A // USART initialization
                 ; 0000 009B // USART disabled
                 ; 0000 009C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000c8 b9ea      	OUT  0xA,R30
                 ; 0000 009D 
                 ; 0000 009E // Analog Comparator initialization
                 ; 0000 009F // Analog Comparator: Off
                 ; 0000 00A0 // The Analog Comparator's positive input is
                 ; 0000 00A1 // connected to the AIN0 pin
                 ; 0000 00A2 // The Analog Comparator's negative input is
                 ; 0000 00A3 // connected to the AIN1 pin
                 ; 0000 00A4 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000c9 e8e0      	LDI  R30,LOW(128)
0000ca b9e8      	OUT  0x8,R30
                 ; 0000 00A5 
                 ; 0000 00A6 // ADC initialization
                 ; 0000 00A7 // ADC Clock frequency: 500.000 kHz
                 ; 0000 00A8 // ADC Voltage Reference: AVCC pin
                 ; 0000 00A9 // ADC High Speed Mode: Off
                 ; 0000 00AA // ADC Auto Trigger Source: Free Running
                 ; 0000 00AB ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000cb e4e0      	LDI  R30,LOW(64)
0000cc b9e7      	OUT  0x7,R30
                 ; 0000 00AC ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
0000cd eeed      	LDI  R30,LOW(237)
0000ce b9e6      	OUT  0x6,R30
                 ; 0000 00AD SFIOR=(1<<ADHSM) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000cf e1e0      	LDI  R30,LOW(16)
0000d0 bfe0      	OUT  0x30,R30
                 ; 0000 00AE 
                 ; 0000 00AF // SPI initialization
                 ; 0000 00B0 // SPI disabled
                 ; 0000 00B1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 b9ed      	OUT  0xD,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // TWI initialization
                 ; 0000 00B4 // TWI disabled
                 ; 0000 00B5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d3 bfe6      	OUT  0x36,R30
                 ; 0000 00B6 
                 ; 0000 00B7 // Alphanumeric LCD initialization
                 ; 0000 00B8 // Connections are specified in the
                 ; 0000 00B9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00BA // RS: PORTB Bit 0
                 ; 0000 00BB // RD: PORTB Bit 1
                 ; 0000 00BC // EN: PORTB Bit 2
                 ; 0000 00BD // D4: PORTB Bit 4
                 ; 0000 00BE // D5: PORTB Bit 5
                 ; 0000 00BF // D6: PORTB Bit 6
                 ; 0000 00C0 // D7: PORTB Bit 7
                 ; 0000 00C1 // Characters/line: 40
                 ; 0000 00C2 lcd_init(40);
0000d4 e2a8      	LDI  R26,LOW(40)
0000d5 d108      	RCALL _lcd_init
                 ; 0000 00C3 lcd_init(20);
0000d6 e1a4      	LDI  R26,LOW(20)
0000d7 d106      	RCALL _lcd_init
                 ; 0000 00C4 lcd_init(20);
0000d8 e1a4      	LDI  R26,LOW(20)
0000d9 d104      	RCALL _lcd_init
                 ; 0000 00C5 lcd_gotoxy(0,0);
0000da d12e      	RCALL SUBOPT_0x0
0000db d130      	RCALL SUBOPT_0x1
                 ; 0000 00C6 lcd_puts("Hello");
                +
0000dc eea0     +LDI R26 , LOW ( _0x6 + ( 0 ) )
0000dd e0b0     +LDI R27 , HIGH ( _0x6 + ( 0 ) )
                 	__POINTW2MN _0x6,0
0000de d0f0      	RCALL _lcd_puts
                 ; 0000 00C7 lcd_gotoxy(0,1);
0000df d129      	RCALL SUBOPT_0x0
0000e0 d12d      	RCALL SUBOPT_0x2
                 ; 0000 00C8 lcd_putchar(0x32);
0000e1 e3a2      	LDI  R26,LOW(50)
0000e2 d0da      	RCALL _lcd_putchar
                 ; 0000 00C9 lcd_clear();
0000e3 d0cf      	RCALL _lcd_clear
                 ; 0000 00CA // Globally enable interrupts
                 ; 0000 00CB #asm("sei")
0000e4 9478      	SEI
                 ; 0000 00CC 
                 ; 0000 00CD while (1)
                 _0x7:
                 ; 0000 00CE {
                 ; 0000 00CF // Place your code here
                 ; 0000 00D0 lcd_gotoxy(0,1);
0000e5 d123      	RCALL SUBOPT_0x0
0000e6 d127      	RCALL SUBOPT_0x2
                 ; 0000 00D1 lcd_putchar((adc_data[0]/1000)+0x30);
0000e7 d128      	RCALL SUBOPT_0x3
0000e8 d12e      	RCALL SUBOPT_0x4
                 ; 0000 00D2 lcd_gotoxy(1,1);
0000e9 e0e1      	LDI  R30,LOW(1)
0000ea d130      	RCALL SUBOPT_0x5
                 ; 0000 00D3 lcd_putchar((adc_data[0]%1000)/100+0x30);
0000eb d124      	RCALL SUBOPT_0x3
0000ec d130      	RCALL SUBOPT_0x6
0000ed d129      	RCALL SUBOPT_0x4
                 ; 0000 00D4 lcd_gotoxy(2,1);
0000ee e0e2      	LDI  R30,LOW(2)
0000ef d12b      	RCALL SUBOPT_0x5
                 ; 0000 00D5 lcd_putchar((adc_data[0]%1000)%100/10+0x30);
0000f0 d11f      	RCALL SUBOPT_0x3
0000f1 d12b      	RCALL SUBOPT_0x6
0000f2 d12f      	RCALL SUBOPT_0x7
0000f3 d123      	RCALL SUBOPT_0x4
                 ; 0000 00D6 lcd_gotoxy(3,1);
0000f4 e0e3      	LDI  R30,LOW(3)
0000f5 d125      	RCALL SUBOPT_0x5
                 ; 0000 00D7 lcd_putchar((adc_data[0]%1000)%100%10+0x30);
0000f6 d119      	RCALL SUBOPT_0x3
0000f7 d125      	RCALL SUBOPT_0x6
0000f8 d129      	RCALL SUBOPT_0x7
0000f9 d12d      	RCALL SUBOPT_0x8
                 ; 0000 00D8 
                 ; 0000 00D9 lcd_gotoxy(6,1);
0000fa e0e6      	LDI  R30,LOW(6)
0000fb d11f      	RCALL SUBOPT_0x5
                 ; 0000 00DA lcd_putchar((adc_data[1]/1000)+0x30);
0000fc d12e      	RCALL SUBOPT_0x9
0000fd d119      	RCALL SUBOPT_0x4
                 ; 0000 00DB lcd_gotoxy(7,1);
0000fe e0e7      	LDI  R30,LOW(7)
0000ff d11b      	RCALL SUBOPT_0x5
                 ; 0000 00DC lcd_putchar((adc_data[1]%1000)/100+0x30);
000100 d12a      	RCALL SUBOPT_0x9
000101 d11b      	RCALL SUBOPT_0x6
000102 d114      	RCALL SUBOPT_0x4
                 ; 0000 00DD lcd_gotoxy(8,1);
000103 e0e8      	LDI  R30,LOW(8)
000104 d116      	RCALL SUBOPT_0x5
                 ; 0000 00DE lcd_putchar((adc_data[1]%1000)%100/10+0x30);
000105 d125      	RCALL SUBOPT_0x9
000106 d116      	RCALL SUBOPT_0x6
000107 d11a      	RCALL SUBOPT_0x7
000108 d10e      	RCALL SUBOPT_0x4
                 ; 0000 00DF lcd_gotoxy(9,1);
000109 e0e9      	LDI  R30,LOW(9)
00010a d110      	RCALL SUBOPT_0x5
                 ; 0000 00E0 lcd_putchar((adc_data[1]%1000)%100%10+0x30);
00010b d11f      	RCALL SUBOPT_0x9
00010c d110      	RCALL SUBOPT_0x6
00010d d114      	RCALL SUBOPT_0x7
00010e d118      	RCALL SUBOPT_0x8
                 ; 0000 00E1 
                 ; 0000 00E2 lcd_gotoxy(0,3);
00010f d0f9      	RCALL SUBOPT_0x0
000110 d121      	RCALL SUBOPT_0xA
                 ; 0000 00E3 lcd_putchar((adc_data[2]/1000)+0x30);
000111 d105      	RCALL SUBOPT_0x4
                 ; 0000 00E4 lcd_gotoxy(1,3);
000112 e0e1      	LDI  R30,LOW(1)
000113 93ea      	ST   -Y,R30
000114 d11d      	RCALL SUBOPT_0xA
                 ; 0000 00E5 lcd_putchar((adc_data[2]%1000)/100+0x30);
000115 d107      	RCALL SUBOPT_0x6
000116 d100      	RCALL SUBOPT_0x4
                 ; 0000 00E6 lcd_gotoxy(2,3);
000117 e0e2      	LDI  R30,LOW(2)
000118 93ea      	ST   -Y,R30
000119 d118      	RCALL SUBOPT_0xA
                 ; 0000 00E7 lcd_putchar((adc_data[2]%1000)%100/10+0x30);
00011a d102      	RCALL SUBOPT_0x6
00011b d106      	RCALL SUBOPT_0x7
00011c d0fa      	RCALL SUBOPT_0x4
                 ; 0000 00E8 lcd_gotoxy(3,3);
00011d e0e3      	LDI  R30,LOW(3)
00011e 93ea      	ST   -Y,R30
00011f d112      	RCALL SUBOPT_0xA
                 ; 0000 00E9 lcd_putchar((adc_data[2]%1000)%100%10+0x30);
000120 d0fc      	RCALL SUBOPT_0x6
000121 d100      	RCALL SUBOPT_0x7
000122 d104      	RCALL SUBOPT_0x8
                 ; 0000 00EA 
                 ; 0000 00EB lcd_gotoxy(6,3);
000123 e0e6      	LDI  R30,LOW(6)
000124 d116      	RCALL SUBOPT_0xB
                 ; 0000 00EC lcd_putchar((adc_data[3]/1000)+0x30);
000125 d0f1      	RCALL SUBOPT_0x4
                 ; 0000 00ED lcd_gotoxy(7,3);
000126 e0e7      	LDI  R30,LOW(7)
000127 d113      	RCALL SUBOPT_0xB
                 ; 0000 00EE lcd_putchar((adc_data[3]%1000)/100+0x30);
000128 d0f4      	RCALL SUBOPT_0x6
000129 d0ed      	RCALL SUBOPT_0x4
                 ; 0000 00EF lcd_gotoxy(8,3);
00012a e0e8      	LDI  R30,LOW(8)
00012b d10f      	RCALL SUBOPT_0xB
                 ; 0000 00F0 lcd_putchar((adc_data[3]%1000)%100/10+0x30);
00012c d0f0      	RCALL SUBOPT_0x6
00012d d0f4      	RCALL SUBOPT_0x7
00012e d0e8      	RCALL SUBOPT_0x4
                 ; 0000 00F1 lcd_gotoxy(9,3);
00012f e0e9      	LDI  R30,LOW(9)
000130 d10a      	RCALL SUBOPT_0xB
                 ; 0000 00F2 lcd_putchar((adc_data[3]%1000)%100%10+0x30);
000131 d0eb      	RCALL SUBOPT_0x6
000132 d0ef      	RCALL SUBOPT_0x7
000133 d0f3      	RCALL SUBOPT_0x8
                 ; 0000 00F3 
                 ; 0000 00F4 adc_value[0] = (float)adc_data[0]*5000/1023;
000134 91e0 00e6 	LDS  R30,_adc_data
000136 91f0 00e7 	LDS  R31,_adc_data+1
000138 d10c      	RCALL SUBOPT_0xC
000139 93e0 00ef 	STS  _adc_value,R30
00013b 93f0 00f0 	STS  _adc_value+1,R31
00013d 9360 00f1 	STS  _adc_value+2,R22
00013f 9370 00f2 	STS  _adc_value+3,R23
                 ; 0000 00F5 lcd_gotoxy(0,0);
000141 d0c7      	RCALL SUBOPT_0x0
000142 d0c9      	RCALL SUBOPT_0x1
                 ; 0000 00F6 lcd_putchar(((int)adc_value[0]/1000)+0x30);
000143 d111      	RCALL SUBOPT_0xD
000144 d11d      	RCALL SUBOPT_0xE
                 ; 0000 00F7 lcd_gotoxy(1,0);
000145 e0e1      	LDI  R30,LOW(1)
000146 d11f      	RCALL SUBOPT_0xF
                 ; 0000 00F8 lcd_putchar(((int)adc_value[0]%1000)/100+0x30);
000147 d10d      	RCALL SUBOPT_0xD
000148 d11f      	RCALL SUBOPT_0x10
000149 d118      	RCALL SUBOPT_0xE
                 ; 0000 00F9 lcd_gotoxy(2,0);
00014a e0e2      	LDI  R30,LOW(2)
00014b d11a      	RCALL SUBOPT_0xF
                 ; 0000 00FA lcd_putchar(((int)adc_value[0]%1000)%100/10+0x30);
00014c d108      	RCALL SUBOPT_0xD
00014d d11a      	RCALL SUBOPT_0x10
00014e d11e      	RCALL SUBOPT_0x11
00014f d112      	RCALL SUBOPT_0xE
                 ; 0000 00FB lcd_gotoxy(3,0);
000150 e0e3      	LDI  R30,LOW(3)
000151 d114      	RCALL SUBOPT_0xF
                 ; 0000 00FC lcd_putchar(((int)adc_value[0]%1000)%100%10+0x30);
000152 d102      	RCALL SUBOPT_0xD
000153 d114      	RCALL SUBOPT_0x10
000154 d118      	RCALL SUBOPT_0x11
000155 d11c      	RCALL SUBOPT_0x12
                 ; 0000 00FD 
                 ; 0000 00FE adc_value[1] = (float)adc_data[1]*5000/1023;
                +
000156 91e0 00e8+LDS R30 , _adc_data + ( 2 )
000158 91f0 00e9+LDS R31 , _adc_data + ( 2 ) + 1
                 	__GETW1MN _adc_data,2
00015a d0ea      	RCALL SUBOPT_0xC
                +
00015b 93e0 00f3+STS _adc_value + ( 4 ) , R30
00015d 93f0 00f4+STS _adc_value + ( 4 ) + 1 , R31
00015f 9360 00f5+STS _adc_value + ( 4 ) + 2 , R22
000161 9370 00f6+STS _adc_value + ( 4 ) + 3 , R23
                 	__PUTD1MN _adc_value,4
                 ; 0000 00FF lcd_gotoxy(6,0);
000163 e0e6      	LDI  R30,LOW(6)
000164 d101      	RCALL SUBOPT_0xF
                 ; 0000 0100 lcd_putchar(((int)adc_value[1]/1000)+0x30);
000165 d110      	RCALL SUBOPT_0x13
000166 d0fb      	RCALL SUBOPT_0xE
                 ; 0000 0101 lcd_gotoxy(7,0);
000167 e0e7      	LDI  R30,LOW(7)
000168 d0fd      	RCALL SUBOPT_0xF
                 ; 0000 0102 lcd_putchar(((int)adc_value[1]%1000)/100+0x30);
000169 d10c      	RCALL SUBOPT_0x13
00016a d0fd      	RCALL SUBOPT_0x10
00016b d0f6      	RCALL SUBOPT_0xE
                 ; 0000 0103 lcd_gotoxy(8,0);
00016c e0e8      	LDI  R30,LOW(8)
00016d d0f8      	RCALL SUBOPT_0xF
                 ; 0000 0104 lcd_putchar(((int)adc_value[1]%1000)%100/10+0x30);
00016e d107      	RCALL SUBOPT_0x13
00016f d0f8      	RCALL SUBOPT_0x10
000170 d0fc      	RCALL SUBOPT_0x11
000171 d0f0      	RCALL SUBOPT_0xE
                 ; 0000 0105 lcd_gotoxy(9,0);
000172 e0e9      	LDI  R30,LOW(9)
000173 d0f2      	RCALL SUBOPT_0xF
                 ; 0000 0106 lcd_putchar(((int)adc_value[1]%1000)%100%10+0x30);
000174 d101      	RCALL SUBOPT_0x13
000175 d0f2      	RCALL SUBOPT_0x10
000176 d0f6      	RCALL SUBOPT_0x11
000177 d0fa      	RCALL SUBOPT_0x12
                 ; 0000 0107 
                 ; 0000 0108 lcd_gotoxy(15,0);
000178 e0ef      	LDI  R30,LOW(15)
000179 d0ec      	RCALL SUBOPT_0xF
                 ; 0000 0109 lcd_putchar((ticks/10)+0x30);
00017a 01d3      	MOVW R26,R6
00017b e0ea      	LDI  R30,LOW(10)
00017c e0f0      	LDI  R31,HIGH(10)
00017d d0e4      	RCALL SUBOPT_0xE
                 ; 0000 010A lcd_gotoxy(16,0);
00017e e1e0      	LDI  R30,LOW(16)
00017f d0e6      	RCALL SUBOPT_0xF
                 ; 0000 010B lcd_putchar((ticks%10)+0x30);
000180 01d3      	MOVW R26,R6
000181 e0ea      	LDI  R30,LOW(10)
000182 e0f0      	LDI  R31,HIGH(10)
000183 d0ee      	RCALL SUBOPT_0x12
                 ; 0000 010C }
000184 cf60      	RJMP _0x7
                 ; 0000 010D }
                 _0xA:
000185 cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x6:
0000e0           	.BYTE 0x6
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000186 931a      	ST   -Y,R17
000187 2f1a      	MOV  R17,R26
000188 b3e8      	IN   R30,0x18
000189 70ef      	ANDI R30,LOW(0xF)
00018a 2fae      	MOV  R26,R30
00018b 2fe1      	MOV  R30,R17
00018c 7fe0      	ANDI R30,LOW(0xF0)
00018d 2bea      	OR   R30,R26
00018e bbe8      	OUT  0x18,R30
00018f d0f3      	RCALL SUBOPT_0x14
000190 9ac2      	SBI  0x18,2
000191 d0f1      	RCALL SUBOPT_0x14
000192 98c2      	CBI  0x18,2
000193 d0ef      	RCALL SUBOPT_0x14
000194 c072      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000195 93aa      	ST   -Y,R26
000196 81a8      	LD   R26,Y
000197 dfee      	RCALL __lcd_write_nibble_G100
000198 81e8          ld    r30,y
000199 95e2          swap  r30
00019a 83e8          st    y,r30
00019b 81a8      	LD   R26,Y
00019c dfe9      	RCALL __lcd_write_nibble_G100
                +
00019d ec88     +LDI R24 , LOW ( 200 )
00019e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00019f 9701     +SBIW R24 , 1
0001a0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a1 9621      	ADIW R28,1
0001a2 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001a3 d0f0      	RCALL __SAVELOCR2
0001a4 2f1a      	MOV  R17,R26
0001a5 810a      	LDD  R16,Y+2
0001a6 2fe1      	MOV  R30,R17
0001a7 e0f0      	LDI  R31,0
0001a8 50e1      	SUBI R30,LOW(-__base_y_G100)
0001a9 4fff      	SBCI R31,HIGH(-__base_y_G100)
0001aa 81e0      	LD   R30,Z
0001ab 0fe0      	ADD  R30,R16
0001ac 2fae      	MOV  R26,R30
0001ad dfe7      	RCALL __lcd_write_data
0001ae 2e90      	MOV  R9,R16
0001af 2e81      	MOV  R8,R17
0001b0 d0e8      	RCALL __LOADLOCR2
0001b1 9623      	ADIW R28,3
0001b2 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001b3 e0a2      	LDI  R26,LOW(2)
0001b4 d0d2      	RCALL SUBOPT_0x15
0001b5 e0ac      	LDI  R26,LOW(12)
0001b6 dfde      	RCALL __lcd_write_data
0001b7 e0a1      	LDI  R26,LOW(1)
0001b8 d0ce      	RCALL SUBOPT_0x15
0001b9 e0e0      	LDI  R30,LOW(0)
0001ba 2e8e      	MOV  R8,R30
0001bb 2e9e      	MOV  R9,R30
0001bc 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001bd 931a      	ST   -Y,R17
0001be 2f1a      	MOV  R17,R26
0001bf 301a      	CPI  R17,10
0001c0 f011      	BREQ _0x2000005
0001c1 149b      	CP   R9,R11
0001c2 f030      	BRLO _0x2000004
                 _0x2000005:
0001c3 d045      	RCALL SUBOPT_0x0
0001c4 9483      	INC  R8
0001c5 2da8      	MOV  R26,R8
0001c6 dfdc      	RCALL _lcd_gotoxy
0001c7 301a      	CPI  R17,10
0001c8 f1f1      	BREQ _0x2080001
                 _0x2000004:
0001c9 9493      	INC  R9
0001ca 9ac0      	SBI  0x18,0
0001cb 2fa1      	MOV  R26,R17
0001cc dfc8      	RCALL __lcd_write_data
0001cd 98c0      	CBI  0x18,0
0001ce c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001cf d0c2      	RCALL __SAVELOCR4
0001d0 019d      	MOVW R18,R26
                 _0x2000008:
0001d1 01d9      	MOVW R26,R18
                +
0001d2 5f2f     +SUBI R18 , LOW ( - 1 )
0001d3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001d4 91ec      	LD   R30,X
0001d5 2f1e      	MOV  R17,R30
0001d6 30e0      	CPI  R30,0
0001d7 f019      	BREQ _0x200000A
0001d8 2fa1      	MOV  R26,R17
0001d9 dfe3      	RCALL _lcd_putchar
0001da cff6      	RJMP _0x2000008
                 _0x200000A:
0001db d0bb      	RCALL __LOADLOCR4
0001dc 9624      	ADIW R28,4
0001dd 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0001de 931a      	ST   -Y,R17
0001df 2f1a      	MOV  R17,R26
0001e0 b3e7      	IN   R30,0x17
0001e1 6fe0      	ORI  R30,LOW(0xF0)
0001e2 bbe7      	OUT  0x17,R30
0001e3 9aba      	SBI  0x17,2
0001e4 9ab8      	SBI  0x17,0
0001e5 9ab9      	SBI  0x17,1
0001e6 98c2      	CBI  0x18,2
0001e7 98c0      	CBI  0x18,0
0001e8 98c1      	CBI  0x18,1
0001e9 2eb1      	MOV  R11,R17
0001ea 2fe1      	MOV  R30,R17
0001eb 58e0      	SUBI R30,-LOW(128)
                +
0001ec 93e0 0101+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001ee 2fe1      	MOV  R30,R17
0001ef 54e0      	SUBI R30,-LOW(192)
                +
0001f0 93e0 0102+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001f2 e1a4      	LDI  R26,LOW(20)
0001f3 e0b0      	LDI  R27,0
0001f4 d20f      	RCALL _delay_ms
0001f5 d095      	RCALL SUBOPT_0x16
0001f6 d094      	RCALL SUBOPT_0x16
0001f7 d093      	RCALL SUBOPT_0x16
0001f8 e2a0      	LDI  R26,LOW(32)
0001f9 df8c      	RCALL __lcd_write_nibble_G100
                +
0001fa e980     +LDI R24 , LOW ( 400 )
0001fb e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0001fc 9701     +SBIW R24 , 1
0001fd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0001fe e2a8      	LDI  R26,LOW(40)
0001ff df95      	RCALL __lcd_write_data
000200 e0a4      	LDI  R26,LOW(4)
000201 df93      	RCALL __lcd_write_data
000202 e8a5      	LDI  R26,LOW(133)
000203 df91      	RCALL __lcd_write_data
000204 e0a6      	LDI  R26,LOW(6)
000205 df8f      	RCALL __lcd_write_data
000206 dfac      	RCALL _lcd_clear
                 _0x2080001:
000207 9119      	LD   R17,Y+
000208 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _adc_data:
0000e6           	.BYTE 0x8
                 _input_index_S0000001000:
0000ee           	.BYTE 0x1
                 _adc_value:
0000ef           	.BYTE 0x10
                 __base_y_G100:
0000ff           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000209 e0e0      	LDI  R30,LOW(0)
00020a 93ea      	ST   -Y,R30
00020b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1:
00020c e0a0      	LDI  R26,LOW(0)
00020d cf95      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
00020e e0a1      	LDI  R26,LOW(1)
00020f cf93      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
000210 91a0 00e6 	LDS  R26,_adc_data
000212 91b0 00e7 	LDS  R27,_adc_data+1
000214 eee8      	LDI  R30,LOW(1000)
000215 e0f3      	LDI  R31,HIGH(1000)
000216 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x4:
000217 d090      	RCALL __DIVW21U
000218 5de0      	SUBI R30,-LOW(48)
000219 2fae      	MOV  R26,R30
00021a cfa2      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00021b 93ea      	ST   -Y,R30
00021c cff1      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x6:
00021d d0a2      	RCALL __MODW21U
00021e 01df      	MOVW R26,R30
00021f e6e4      	LDI  R30,LOW(100)
000220 e0f0      	LDI  R31,HIGH(100)
000221 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x7:
000222 d09d      	RCALL __MODW21U
000223 01df      	MOVW R26,R30
000224 e0ea      	LDI  R30,LOW(10)
000225 e0f0      	LDI  R31,HIGH(10)
000226 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
000227 d098      	RCALL __MODW21U
000228 5de0      	SUBI R30,-LOW(48)
000229 2fae      	MOV  R26,R30
00022a cf92      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
                +
00022b 91a0 00e8+LDS R26 , _adc_data + ( 2 )
00022d 91b0 00e9+LDS R27 , _adc_data + ( 2 ) + 1
                 	__GETW2MN _adc_data,2
00022f eee8      	LDI  R30,LOW(1000)
000230 e0f3      	LDI  R31,HIGH(1000)
000231 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0xA:
000232 e0a3      	LDI  R26,LOW(3)
000233 df6f      	RCALL _lcd_gotoxy
                +
000234 91a0 00ea+LDS R26 , _adc_data + ( 4 )
000236 91b0 00eb+LDS R27 , _adc_data + ( 4 ) + 1
                 	__GETW2MN _adc_data,4
000238 eee8      	LDI  R30,LOW(1000)
000239 e0f3      	LDI  R31,HIGH(1000)
00023a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xB:
00023b 93ea      	ST   -Y,R30
00023c e0a3      	LDI  R26,LOW(3)
00023d df65      	RCALL _lcd_gotoxy
                +
00023e 91a0 00ec+LDS R26 , _adc_data + ( 6 )
000240 91b0 00ed+LDS R27 , _adc_data + ( 6 ) + 1
                 	__GETW2MN _adc_data,6
000242 eee8      	LDI  R30,LOW(1000)
000243 e0f3      	LDI  R31,HIGH(1000)
000244 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xC:
000245 2766      	CLR  R22
000246 2777      	CLR  R23
000247 d0fd      	RCALL __CDF1
                +
000248 e0a0     +LDI R26 , LOW ( 0x459C4000 )
000249 e4b0     +LDI R27 , HIGH ( 0x459C4000 )
00024a e98c     +LDI R24 , BYTE3 ( 0x459C4000 )
00024b e495     +LDI R25 , BYTE4 ( 0x459C4000 )
                 	__GETD2N 0x459C4000
00024c d125      	RCALL __MULF12
00024d 01df      	MOVW R26,R30
00024e 01cb      	MOVW R24,R22
                +
00024f e0e0     +LDI R30 , LOW ( 0x447FC000 )
000250 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000251 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000252 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000253 d16c      	RCALL __DIVF21
000254 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0xD:
000255 91e0 00ef 	LDS  R30,_adc_value
000257 91f0 00f0 	LDS  R31,_adc_value+1
000259 9160 00f1 	LDS  R22,_adc_value+2
00025b 9170 00f2 	LDS  R23,_adc_value+3
00025d d0b0      	RCALL __CFD1
00025e 01df      	MOVW R26,R30
00025f eee8      	LDI  R30,LOW(1000)
000260 e0f3      	LDI  R31,HIGH(1000)
000261 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0xE:
000262 d058      	RCALL __DIVW21
000263 5de0      	SUBI R30,-LOW(48)
000264 2fae      	MOV  R26,R30
000265 cf57      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
000266 93ea      	ST   -Y,R30
000267 cfa4      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x10:
000268 d05a      	RCALL __MODW21
000269 01df      	MOVW R26,R30
00026a e6e4      	LDI  R30,LOW(100)
00026b e0f0      	LDI  R31,HIGH(100)
00026c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
00026d d055      	RCALL __MODW21
00026e 01df      	MOVW R26,R30
00026f e0ea      	LDI  R30,LOW(10)
000270 e0f0      	LDI  R31,HIGH(10)
000271 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x12:
000272 d050      	RCALL __MODW21
000273 5de0      	SUBI R30,-LOW(48)
000274 2fae      	MOV  R26,R30
000275 cf47      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x13:
                +
000276 91e0 00f3+LDS R30 , _adc_value + ( 4 )
000278 91f0 00f4+LDS R31 , _adc_value + ( 4 ) + 1
00027a 9160 00f5+LDS R22 , _adc_value + ( 4 ) + 2
00027c 9170 00f6+LDS R23 , _adc_value + ( 4 ) + 3
                 	__GETD1MN _adc_value,4
00027e d08f      	RCALL __CFD1
00027f 01df      	MOVW R26,R30
000280 eee8      	LDI  R30,LOW(1000)
000281 e0f3      	LDI  R31,HIGH(1000)
000282 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
                +
000283 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000284 958a     +DEC R24
000285 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000286 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000287 df0d      	RCALL __lcd_write_data
000288 e0a3      	LDI  R26,LOW(3)
000289 e0b0      	LDI  R27,0
00028a c179      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x16:
00028b e3a0      	LDI  R26,LOW(48)
00028c def9      	RCALL __lcd_write_nibble_G100
                +
00028d e980     +LDI R24 , LOW ( 400 )
00028e e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
00028f 9701     +SBIW R24 , 1
000290 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000291 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000292 933a      	ST   -Y,R19
                 __SAVELOCR3:
000293 932a      	ST   -Y,R18
                 __SAVELOCR2:
000294 931a      	ST   -Y,R17
000295 930a      	ST   -Y,R16
000296 9508      	RET
                 
                 __LOADLOCR4:
000297 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000298 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000299 8119      	LDD  R17,Y+1
00029a 8108      	LD   R16,Y
00029b 9508      	RET
                 
                 __ANEGW1:
00029c 95f1      	NEG  R31
00029d 95e1      	NEG  R30
00029e 40f0      	SBCI R31,0
00029f 9508      	RET
                 
                 __ANEGD1:
0002a0 95f0      	COM  R31
0002a1 9560      	COM  R22
0002a2 9570      	COM  R23
0002a3 95e1      	NEG  R30
0002a4 4fff      	SBCI R31,-1
0002a5 4f6f      	SBCI R22,-1
0002a6 4f7f      	SBCI R23,-1
0002a7 9508      	RET
                 
                 __DIVW21U:
0002a8 2400      	CLR  R0
0002a9 2411      	CLR  R1
0002aa e190      	LDI  R25,16
                 __DIVW21U1:
0002ab 0faa      	LSL  R26
0002ac 1fbb      	ROL  R27
0002ad 1c00      	ROL  R0
0002ae 1c11      	ROL  R1
0002af 1a0e      	SUB  R0,R30
0002b0 0a1f      	SBC  R1,R31
0002b1 f418      	BRCC __DIVW21U2
0002b2 0e0e      	ADD  R0,R30
0002b3 1e1f      	ADC  R1,R31
0002b4 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002b5 60a1      	SBR  R26,1
                 __DIVW21U3:
0002b6 959a      	DEC  R25
0002b7 f799      	BRNE __DIVW21U1
0002b8 01fd      	MOVW R30,R26
0002b9 01d0      	MOVW R26,R0
0002ba 9508      	RET
                 
                 __DIVW21:
0002bb d015      	RCALL __CHKSIGNW
0002bc dfeb      	RCALL __DIVW21U
0002bd f40e      	BRTC __DIVW211
0002be dfdd      	RCALL __ANEGW1
                 __DIVW211:
0002bf 9508      	RET
                 
                 __MODW21U:
0002c0 dfe7      	RCALL __DIVW21U
0002c1 01fd      	MOVW R30,R26
0002c2 9508      	RET
                 
                 __MODW21:
0002c3 94e8      	CLT
0002c4 ffb7      	SBRS R27,7
0002c5 c004      	RJMP __MODW211
0002c6 95b1      	NEG  R27
0002c7 95a1      	NEG  R26
0002c8 40b0      	SBCI R27,0
0002c9 9468      	SET
                 __MODW211:
0002ca fdf7      	SBRC R31,7
0002cb dfd0      	RCALL __ANEGW1
0002cc dfdb      	RCALL __DIVW21U
0002cd 01fd      	MOVW R30,R26
0002ce f40e      	BRTC __MODW212
0002cf dfcc      	RCALL __ANEGW1
                 __MODW212:
0002d0 9508      	RET
                 
                 __CHKSIGNW:
0002d1 94e8      	CLT
0002d2 fff7      	SBRS R31,7
0002d3 c002      	RJMP __CHKSW1
0002d4 dfc7      	RCALL __ANEGW1
0002d5 9468      	SET
                 __CHKSW1:
0002d6 ffb7      	SBRS R27,7
0002d7 c006      	RJMP __CHKSW2
0002d8 95b1      	NEG  R27
0002d9 95a1      	NEG  R26
0002da 40b0      	SBCI R27,0
0002db f800      	BLD  R0,0
0002dc 9403      	INC  R0
0002dd fa00      	BST  R0,0
                 __CHKSW2:
0002de 9508      	RET
                 
                 __ROUND_REPACK:
0002df 2355      	TST  R21
0002e0 f442      	BRPL __REPACK
0002e1 3850      	CPI  R21,0x80
0002e2 f411      	BRNE __ROUND_REPACK0
0002e3 ffe0      	SBRS R30,0
0002e4 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002e5 9631      	ADIW R30,1
0002e6 1f69      	ADC  R22,R25
0002e7 1f79      	ADC  R23,R25
0002e8 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002e9 e850      	LDI  R21,0x80
0002ea 2757      	EOR  R21,R23
0002eb f411      	BRNE __REPACK0
0002ec 935f      	PUSH R21
0002ed c073      	RJMP __ZERORES
                 __REPACK0:
0002ee 3f5f      	CPI  R21,0xFF
0002ef f031      	BREQ __REPACK1
0002f0 0f66      	LSL  R22
0002f1 0c00      	LSL  R0
0002f2 9557      	ROR  R21
0002f3 9567      	ROR  R22
0002f4 2f75      	MOV  R23,R21
0002f5 9508      	RET
                 __REPACK1:
0002f6 935f      	PUSH R21
0002f7 2000      	TST  R0
0002f8 f00a      	BRMI __REPACK2
0002f9 c072      	RJMP __MAXRES
                 __REPACK2:
0002fa c06b      	RJMP __MINRES
                 
                 __UNPACK:
0002fb e850      	LDI  R21,0x80
0002fc 2e19      	MOV  R1,R25
0002fd 2215      	AND  R1,R21
0002fe 0f88      	LSL  R24
0002ff 1f99      	ROL  R25
000300 2795      	EOR  R25,R21
000301 0f55      	LSL  R21
000302 9587      	ROR  R24
                 
                 __UNPACK1:
000303 e850      	LDI  R21,0x80
000304 2e07      	MOV  R0,R23
000305 2205      	AND  R0,R21
000306 0f66      	LSL  R22
000307 1f77      	ROL  R23
000308 2775      	EOR  R23,R21
000309 0f55      	LSL  R21
00030a 9567      	ROR  R22
00030b 9508      	RET
                 
                 __CFD1U:
00030c 9468      	SET
00030d c001      	RJMP __CFD1U0
                 __CFD1:
00030e 94e8      	CLT
                 __CFD1U0:
00030f 935f      	PUSH R21
000310 dff2      	RCALL __UNPACK1
000311 3870      	CPI  R23,0x80
000312 f018      	BRLO __CFD10
000313 3f7f      	CPI  R23,0xFF
000314 f408      	BRCC __CFD10
000315 c04b      	RJMP __ZERORES
                 __CFD10:
000316 e156      	LDI  R21,22
000317 1b57      	SUB  R21,R23
000318 f4aa      	BRPL __CFD11
000319 9551      	NEG  R21
00031a 3058      	CPI  R21,8
00031b f40e      	BRTC __CFD19
00031c 3059      	CPI  R21,9
                 __CFD19:
00031d f030      	BRLO __CFD17
00031e efef      	SER  R30
00031f efff      	SER  R31
000320 ef6f      	SER  R22
000321 e77f      	LDI  R23,0x7F
000322 f977      	BLD  R23,7
000323 c01a      	RJMP __CFD15
                 __CFD17:
000324 2777      	CLR  R23
000325 2355      	TST  R21
000326 f0b9      	BREQ __CFD15
                 __CFD18:
000327 0fee      	LSL  R30
000328 1fff      	ROL  R31
000329 1f66      	ROL  R22
00032a 1f77      	ROL  R23
00032b 955a      	DEC  R21
00032c f7d1      	BRNE __CFD18
00032d c010      	RJMP __CFD15
                 __CFD11:
00032e 2777      	CLR  R23
                 __CFD12:
00032f 3058      	CPI  R21,8
000330 f028      	BRLO __CFD13
000331 2fef      	MOV  R30,R31
000332 2ff6      	MOV  R31,R22
000333 2f67      	MOV  R22,R23
000334 5058      	SUBI R21,8
000335 cff9      	RJMP __CFD12
                 __CFD13:
000336 2355      	TST  R21
000337 f031      	BREQ __CFD15
                 __CFD14:
000338 9576      	LSR  R23
000339 9567      	ROR  R22
00033a 95f7      	ROR  R31
00033b 95e7      	ROR  R30
00033c 955a      	DEC  R21
00033d f7d1      	BRNE __CFD14
                 __CFD15:
00033e 2000      	TST  R0
00033f f40a      	BRPL __CFD16
000340 df5f      	RCALL __ANEGD1
                 __CFD16:
000341 915f      	POP  R21
000342 9508      	RET
                 
                 __CDF1U:
000343 9468      	SET
000344 c001      	RJMP __CDF1U0
                 __CDF1:
000345 94e8      	CLT
                 __CDF1U0:
000346 9730      	SBIW R30,0
000347 4060      	SBCI R22,0
000348 4070      	SBCI R23,0
000349 f0b1      	BREQ __CDF10
00034a 2400      	CLR  R0
00034b f026      	BRTS __CDF11
00034c 2377      	TST  R23
00034d f412      	BRPL __CDF11
00034e 9400      	COM  R0
00034f df50      	RCALL __ANEGD1
                 __CDF11:
000350 2e17      	MOV  R1,R23
000351 e17e      	LDI  R23,30
000352 2011      	TST  R1
                 __CDF12:
000353 f032      	BRMI __CDF13
000354 957a      	DEC  R23
000355 0fee      	LSL  R30
000356 1fff      	ROL  R31
000357 1f66      	ROL  R22
000358 1c11      	ROL  R1
000359 cff9      	RJMP __CDF12
                 __CDF13:
00035a 2fef      	MOV  R30,R31
00035b 2ff6      	MOV  R31,R22
00035c 2d61      	MOV  R22,R1
00035d 935f      	PUSH R21
00035e df8a      	RCALL __REPACK
00035f 915f      	POP  R21
                 __CDF10:
000360 9508      	RET
                 
                 __ZERORES:
000361 27ee      	CLR  R30
000362 27ff      	CLR  R31
000363 01bf      	MOVW R22,R30
000364 915f      	POP  R21
000365 9508      	RET
                 
                 __MINRES:
000366 efef      	SER  R30
000367 efff      	SER  R31
000368 e76f      	LDI  R22,0x7F
000369 ef7f      	SER  R23
00036a 915f      	POP  R21
00036b 9508      	RET
                 
                 __MAXRES:
00036c efef      	SER  R30
00036d efff      	SER  R31
00036e e76f      	LDI  R22,0x7F
00036f e77f      	LDI  R23,0x7F
000370 915f      	POP  R21
000371 9508      	RET
                 
                 __MULF12:
000372 935f      	PUSH R21
000373 df87      	RCALL __UNPACK
000374 3870      	CPI  R23,0x80
000375 f359      	BREQ __ZERORES
000376 3890      	CPI  R25,0x80
000377 f349      	BREQ __ZERORES
000378 2401      	EOR  R0,R1
000379 9408      	SEC
00037a 1f79      	ADC  R23,R25
00037b f423      	BRVC __MULF124
00037c f324      	BRLT __ZERORES
                 __MULF125:
00037d 2000      	TST  R0
00037e f33a      	BRMI __MINRES
00037f cfec      	RJMP __MAXRES
                 __MULF124:
000380 920f      	PUSH R0
000381 931f      	PUSH R17
000382 932f      	PUSH R18
000383 933f      	PUSH R19
000384 934f      	PUSH R20
000385 2711      	CLR  R17
000386 2722      	CLR  R18
000387 2799      	CLR  R25
000388 9f68      	MUL  R22,R24
000389 01a0      	MOVW R20,R0
00038a 9f8f      	MUL  R24,R31
00038b 2d30      	MOV  R19,R0
00038c 0d41      	ADD  R20,R1
00038d 1f59      	ADC  R21,R25
00038e 9f6b      	MUL  R22,R27
00038f 0d30      	ADD  R19,R0
000390 1d41      	ADC  R20,R1
000391 1f59      	ADC  R21,R25
000392 9f8e      	MUL  R24,R30
000393 d027      	RCALL __MULF126
000394 9fbf      	MUL  R27,R31
000395 d025      	RCALL __MULF126
000396 9f6a      	MUL  R22,R26
000397 d023      	RCALL __MULF126
000398 9fbe      	MUL  R27,R30
000399 d01d      	RCALL __MULF127
00039a 9faf      	MUL  R26,R31
00039b d01b      	RCALL __MULF127
00039c 9fae      	MUL  R26,R30
00039d 0d11      	ADD  R17,R1
00039e 1f29      	ADC  R18,R25
00039f 1f39      	ADC  R19,R25
0003a0 1f49      	ADC  R20,R25
0003a1 1f59      	ADC  R21,R25
0003a2 2fe3      	MOV  R30,R19
0003a3 2ff4      	MOV  R31,R20
0003a4 2f65      	MOV  R22,R21
0003a5 2f52      	MOV  R21,R18
0003a6 914f      	POP  R20
0003a7 913f      	POP  R19
0003a8 912f      	POP  R18
0003a9 911f      	POP  R17
0003aa 900f      	POP  R0
0003ab 2366      	TST  R22
0003ac f02a      	BRMI __MULF122
0003ad 0f55      	LSL  R21
0003ae 1fee      	ROL  R30
0003af 1fff      	ROL  R31
0003b0 1f66      	ROL  R22
0003b1 c002      	RJMP __MULF123
                 __MULF122:
0003b2 9573      	INC  R23
0003b3 f24b      	BRVS __MULF125
                 __MULF123:
0003b4 df2a      	RCALL __ROUND_REPACK
0003b5 915f      	POP  R21
0003b6 9508      	RET
                 
                 __MULF127:
0003b7 0d10      	ADD  R17,R0
0003b8 1d21      	ADC  R18,R1
0003b9 1f39      	ADC  R19,R25
0003ba c002      	RJMP __MULF128
                 __MULF126:
0003bb 0d20      	ADD  R18,R0
0003bc 1d31      	ADC  R19,R1
                 __MULF128:
0003bd 1f49      	ADC  R20,R25
0003be 1f59      	ADC  R21,R25
0003bf 9508      	RET
                 
                 __DIVF21:
0003c0 935f      	PUSH R21
0003c1 df39      	RCALL __UNPACK
0003c2 3870      	CPI  R23,0x80
0003c3 f421      	BRNE __DIVF210
0003c4 2011      	TST  R1
                 __DIVF211:
0003c5 f40a      	BRPL __DIVF219
0003c6 cf9f      	RJMP __MINRES
                 __DIVF219:
0003c7 cfa4      	RJMP __MAXRES
                 __DIVF210:
0003c8 3890      	CPI  R25,0x80
0003c9 f409      	BRNE __DIVF218
                 __DIVF217:
0003ca cf96      	RJMP __ZERORES
                 __DIVF218:
0003cb 2401      	EOR  R0,R1
0003cc 9408      	SEC
0003cd 0b97      	SBC  R25,R23
0003ce f41b      	BRVC __DIVF216
0003cf f3d4      	BRLT __DIVF217
0003d0 2000      	TST  R0
0003d1 cff3      	RJMP __DIVF211
                 __DIVF216:
0003d2 2f79      	MOV  R23,R25
0003d3 931f      	PUSH R17
0003d4 932f      	PUSH R18
0003d5 933f      	PUSH R19
0003d6 934f      	PUSH R20
0003d7 2411      	CLR  R1
0003d8 2711      	CLR  R17
0003d9 2722      	CLR  R18
0003da 2733      	CLR  R19
0003db 01a9      	MOVW R20,R18
0003dc e290      	LDI  R25,32
                 __DIVF212:
0003dd 17ae      	CP   R26,R30
0003de 07bf      	CPC  R27,R31
0003df 0786      	CPC  R24,R22
0003e0 0741      	CPC  R20,R17
0003e1 f030      	BRLO __DIVF213
0003e2 1bae      	SUB  R26,R30
0003e3 0bbf      	SBC  R27,R31
0003e4 0b86      	SBC  R24,R22
0003e5 0b41      	SBC  R20,R17
0003e6 9408      	SEC
0003e7 c001      	RJMP __DIVF214
                 __DIVF213:
0003e8 9488      	CLC
                 __DIVF214:
0003e9 1f55      	ROL  R21
0003ea 1f22      	ROL  R18
0003eb 1f33      	ROL  R19
0003ec 1c11      	ROL  R1
0003ed 1faa      	ROL  R26
0003ee 1fbb      	ROL  R27
0003ef 1f88      	ROL  R24
0003f0 1f44      	ROL  R20
0003f1 959a      	DEC  R25
0003f2 f751      	BRNE __DIVF212
0003f3 01f9      	MOVW R30,R18
0003f4 2d61      	MOV  R22,R1
0003f5 914f      	POP  R20
0003f6 913f      	POP  R19
0003f7 912f      	POP  R18
0003f8 911f      	POP  R17
0003f9 2366      	TST  R22
0003fa f032      	BRMI __DIVF215
0003fb 0f55      	LSL  R21
0003fc 1fee      	ROL  R30
0003fd 1fff      	ROL  R31
0003fe 1f66      	ROL  R22
0003ff 957a      	DEC  R23
000400 f24b      	BRVS __DIVF217
                 __DIVF215:
000401 dedd      	RCALL __ROUND_REPACK
000402 915f      	POP  R21
000403 9508      	RET
                 
                 _delay_ms:
000404 9610      	adiw r26,0
000405 f039      	breq __delay_ms1
                 __delay_ms0:
000406 95a8      	wdr
                +
000407 ea80     +LDI R24 , LOW ( 0xFA0 )
000408 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000409 9701     +SBIW R24 , 1
00040a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00040b 9711      	sbiw r26,1
00040c f7c9      	brne __delay_ms0
                 __delay_ms1:
00040d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :  30 r1 :  22 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   6 r7 :   2 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  31 r18:  18 r19:  15 r20:  14 r21:  48 r22:  39 r23:  38 
r24:  31 r25:  31 r26:  80 r27:  27 r28:   4 r29:   1 r30: 217 r31:  64 
x  :   6 y  :  43 z  :   8 
Registers used: 28 out of 35 (80.0%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   8 
adiw  :   7 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   2 brmi  :   5 brne  :  20 brpl  :   5 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 cbi   :   5 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  22 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   4 cp    :   4 
cpc   :   5 cpi   :  15 cpse  :   0 dec   :   9 des   :   0 eor   :   5 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   6 
inc   :   4 ld    :  16 ldd   :   4 ldi   : 134 lds   :  23 lpm   :   7 
lsl   :  12 lsr   :   1 mov   :  40 movw  :  27 mul   :   9 muls  :   0 
mulsu :   0 neg   :   8 nop   :   0 or    :   1 ori   :   1 out   :  46 
pop   :  16 push  :  15 rcall : 178 ret   :  39 reti  :   2 rjmp  :  60 
rol   :  26 ror   :   7 sbc   :   5 sbci  :  10 sbi   :   6 sbic  :   0 
sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   1 sbrs  :   4 sec   :   3 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   4 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  30 std   :   0 
sts   :  12 sub   :   3 subi  :  11 swap  :   1 tst   :  12 wdr   :   1 

Instructions used: 71 out of 114 (62.3%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00081c   2026     50   2076    8192  25.3%
[.dseg] 0x000060 0x000103      0     35     35     512   6.8%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 7 warnings
