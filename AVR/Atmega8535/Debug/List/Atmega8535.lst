
AVRASM ver. 2.1.30  D:\GitHub\Proteus\AVR\Atmega8535\Debug\List\Atmega8535.asm Fri Feb 03 20:48:24 2023

D:\GitHub\Proteus\AVR\Atmega8535\Debug\List\Atmega8535.asm(1415): warning: Register r5 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Atmega8535\Debug\List\Atmega8535.asm(1416): warning: Register r4 already defined by the .DEF directive
D:\GitHub\Proteus\AVR\Atmega8535\Debug\List\Atmega8535.asm(1417): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.50 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8535
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 128 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8535
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 512
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x025F
                 	.EQU __DSTACK_SIZE=0x0080
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x20
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	RCALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c028      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e c046      	RJMP _adc_isr
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
000013 cfec      	RJMP 0x00
000014 cfeb      	RJMP 0x00
                 
                 _tbl10_G101:
000015 2710
000016 03e8
000017 0064
000018 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000019 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00001a 1000
00001b 0100
00001c 0010
00001d 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00001e 6548
00001f 6c6c
000020 006f      	.DB  0x48,0x65,0x6C,0x6C,0x6F,0x0
                 _0x2000003:
000021 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000022 0006      	.DW  0x06
000023 00e0      	.DW  _0x4
000024 003c      	.DW  _0x0*2
                 
000025 0002      	.DW  0x02
000026 00f3      	.DW  __base_y_G100
000027 0042      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000028 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000029 94f8      	CLI
00002a 27ee      	CLR  R30
00002b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002c e0f1      	LDI  R31,1
00002d bffb      	OUT  GICR,R31
00002e bfeb      	OUT  GICR,R30
00002f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000030 e08d      	LDI  R24,(14-2)+1
000031 e0a2      	LDI  R26,2
000032 27bb      	CLR  R27
                 __CLEAR_REG:
000033 93ed      	ST   X+,R30
000034 958a      	DEC  R24
000035 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000036 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000037 e092      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000038 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000039 93ed      	ST   X+,R30
00003a 9701      	SBIW R24,1
00003b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003c e4e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003e 9185      	LPM  R24,Z+
00003f 9195      	LPM  R25,Z+
000040 9700      	SBIW R24,0
000041 f061      	BREQ __GLOBAL_INI_END
000042 91a5      	LPM  R26,Z+
000043 91b5      	LPM  R27,Z+
000044 9005      	LPM  R0,Z+
000045 9015      	LPM  R1,Z+
000046 01bf      	MOVW R22,R30
000047 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000048 9005      	LPM  R0,Z+
000049 920d      	ST   X+,R0
00004a 9701      	SBIW R24,1
00004b f7e1      	BRNE __GLOBAL_INI_LOOP
00004c 01fb      	MOVW R30,R22
00004d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00004e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00004f bfed      	OUT  SPL,R30
000050 e0e2      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000051 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000052 eec0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000053 e0d0      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000054 c02e      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0xE0
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;interrupt [15] void adc_isr(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _adc_isr:
                 ; .FSTART _adc_isr
000055 938a      	ST   -Y,R24
000056 93aa      	ST   -Y,R26
000057 93ba      	ST   -Y,R27
000058 93ea      	ST   -Y,R30
000059 93fa      	ST   -Y,R31
00005a b7ef      	IN   R30,SREG
00005b 93ea      	ST   -Y,R30
                 ; 0000 0029 static unsigned char input_index=0;
                 ; 0000 002A // Read the AD conversion result
                 ; 0000 002B adc_data[input_index]=ADCW;
00005c 91e0 00ea 	LDS  R30,_input_index_S0000000000
00005e eea6      	LDI  R26,LOW(_adc_data)
00005f e0b0      	LDI  R27,HIGH(_adc_data)
000060 e0f0      	LDI  R31,0
000061 0fee      	LSL  R30
000062 1fff      	ROL  R31
000063 0fae      	ADD  R26,R30
000064 1fbf      	ADC  R27,R31
000065 b1e4      	IN   R30,0x4
000066 b1f5      	IN   R31,0x4+1
000067 93ed      	ST   X+,R30
000068 93fc      	ST   X,R31
                 ; 0000 002C // Select next ADC input
                 ; 0000 002D if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000069 91a0 00ea 	LDS  R26,_input_index_S0000000000
00006b 5faf      	SUBI R26,-LOW(1)
00006c 93a0 00ea 	STS  _input_index_S0000000000,R26
00006e 30a2      	CPI  R26,LOW(0x2)
00006f f018      	BRLO _0x3
                 ; 0000 002E input_index=0;
000070 e0e0      	LDI  R30,LOW(0)
000071 93e0 00ea 	STS  _input_index_S0000000000,R30
                 ; 0000 002F ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x3:
000073 91e0 00ea 	LDS  R30,_input_index_S0000000000
000075 5ce0      	SUBI R30,-LOW(64)
000076 b9e7      	OUT  0x7,R30
                 ; 0000 0030 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0031 delay_us(10);
                +
000077 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000078 958a     +DEC R24
000079 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 0032 // Start the AD conversion
                 ; 0000 0033 ADCSRA|=(1<<ADSC);
00007a 9a36      	SBI  0x6,6
                 ; 0000 0034 }
00007b 91e9      	LD   R30,Y+
00007c bfef      	OUT  SREG,R30
00007d 91f9      	LD   R31,Y+
00007e 91e9      	LD   R30,Y+
00007f 91b9      	LD   R27,Y+
000080 91a9      	LD   R26,Y+
000081 9189      	LD   R24,Y+
000082 9518      	RETI
                 ; .FEND
                 ;void main(void)
                 ; 0000 003A {
                 _main:
                 ; .FSTART _main
                 ; 0000 003B // Declare your local variables here
                 ; 0000 003C 
                 ; 0000 003D // Input/Output Ports initialization
                 ; 0000 003E // Port A initialization
                 ; 0000 003F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0040 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000083 e0e0      	LDI  R30,LOW(0)
000084 bbea      	OUT  0x1A,R30
                 ; 0000 0041 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0042 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000085 bbeb      	OUT  0x1B,R30
                 ; 0000 0043 
                 ; 0000 0044 // Port B initialization
                 ; 0000 0045 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0046 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000086 bbe7      	OUT  0x17,R30
                 ; 0000 0047 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0048 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000087 bbe8      	OUT  0x18,R30
                 ; 0000 0049 
                 ; 0000 004A // Port C initialization
                 ; 0000 004B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004C DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000088 bbe4      	OUT  0x14,R30
                 ; 0000 004D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000089 bbe5      	OUT  0x15,R30
                 ; 0000 004F 
                 ; 0000 0050 // Port D initialization
                 ; 0000 0051 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0052 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00008a bbe1      	OUT  0x11,R30
                 ; 0000 0053 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0054 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00008b bbe2      	OUT  0x12,R30
                 ; 0000 0055 
                 ; 0000 0056 // Timer/Counter 0 initialization
                 ; 0000 0057 // Clock source: System Clock
                 ; 0000 0058 // Clock value: Timer 0 Stopped
                 ; 0000 0059 // Mode: Normal top=0xFF
                 ; 0000 005A // OC0 output: Disconnected
                 ; 0000 005B TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00008c bfe3      	OUT  0x33,R30
                 ; 0000 005C TCNT0=0x00;
00008d bfe2      	OUT  0x32,R30
                 ; 0000 005D OCR0=0x00;
00008e bfec      	OUT  0x3C,R30
                 ; 0000 005E 
                 ; 0000 005F // Timer/Counter 1 initialization
                 ; 0000 0060 // Clock source: System Clock
                 ; 0000 0061 // Clock value: Timer1 Stopped
                 ; 0000 0062 // Mode: Normal top=0xFFFF
                 ; 0000 0063 // OC1A output: Disconnected
                 ; 0000 0064 // OC1B output: Disconnected
                 ; 0000 0065 // Noise Canceler: Off
                 ; 0000 0066 // Input Capture on Falling Edge
                 ; 0000 0067 // Timer1 Overflow Interrupt: Off
                 ; 0000 0068 // Input Capture Interrupt: Off
                 ; 0000 0069 // Compare A Match Interrupt: Off
                 ; 0000 006A // Compare B Match Interrupt: Off
                 ; 0000 006B TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00008f bdef      	OUT  0x2F,R30
                 ; 0000 006C TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000090 bdee      	OUT  0x2E,R30
                 ; 0000 006D TCNT1H=0x00;
000091 bded      	OUT  0x2D,R30
                 ; 0000 006E TCNT1L=0x00;
000092 bdec      	OUT  0x2C,R30
                 ; 0000 006F ICR1H=0x00;
000093 bde7      	OUT  0x27,R30
                 ; 0000 0070 ICR1L=0x00;
000094 bde6      	OUT  0x26,R30
                 ; 0000 0071 OCR1AH=0x00;
000095 bdeb      	OUT  0x2B,R30
                 ; 0000 0072 OCR1AL=0x00;
000096 bdea      	OUT  0x2A,R30
                 ; 0000 0073 OCR1BH=0x00;
000097 bde9      	OUT  0x29,R30
                 ; 0000 0074 OCR1BL=0x00;
000098 bde8      	OUT  0x28,R30
                 ; 0000 0075 
                 ; 0000 0076 // Timer/Counter 2 initialization
                 ; 0000 0077 // Clock source: System Clock
                 ; 0000 0078 // Clock value: Timer2 Stopped
                 ; 0000 0079 // Mode: Normal top=0xFF
                 ; 0000 007A // OC2 output: Disconnected
                 ; 0000 007B ASSR=0<<AS2;
000099 bde2      	OUT  0x22,R30
                 ; 0000 007C TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00009a bde5      	OUT  0x25,R30
                 ; 0000 007D TCNT2=0x00;
00009b bde4      	OUT  0x24,R30
                 ; 0000 007E OCR2=0x00;
00009c bde3      	OUT  0x23,R30
                 ; 0000 007F 
                 ; 0000 0080 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0081 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
00009d bfe9      	OUT  0x39,R30
                 ; 0000 0082 
                 ; 0000 0083 // External Interrupt(s) initialization
                 ; 0000 0084 // INT0: Off
                 ; 0000 0085 // INT1: Off
                 ; 0000 0086 // INT2: Off
                 ; 0000 0087 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
00009e bfe5      	OUT  0x35,R30
                 ; 0000 0088 MCUCSR=(0<<ISC2);
00009f bfe4      	OUT  0x34,R30
                 ; 0000 0089 
                 ; 0000 008A // USART initialization
                 ; 0000 008B // USART disabled
                 ; 0000 008C UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000a0 b9ea      	OUT  0xA,R30
                 ; 0000 008D 
                 ; 0000 008E // Analog Comparator initialization
                 ; 0000 008F // Analog Comparator: Off
                 ; 0000 0090 // The Analog Comparator's positive input is
                 ; 0000 0091 // connected to the AIN0 pin
                 ; 0000 0092 // The Analog Comparator's negative input is
                 ; 0000 0093 // connected to the AIN1 pin
                 ; 0000 0094 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a1 e8e0      	LDI  R30,LOW(128)
0000a2 b9e8      	OUT  0x8,R30
                 ; 0000 0095 
                 ; 0000 0096 // ADC initialization
                 ; 0000 0097 // ADC Clock frequency: 250.000 kHz
                 ; 0000 0098 // ADC Voltage Reference: AVCC pin
                 ; 0000 0099 // ADC High Speed Mode: Off
                 ; 0000 009A // ADC Auto Trigger Source: Free Running
                 ; 0000 009B ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0000a3 e4e0      	LDI  R30,LOW(64)
0000a4 b9e7      	OUT  0x7,R30
                 ; 0000 009C ADCSRA=(1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (0<<ADIF) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (0<<ADPS0);
0000a5 eeee      	LDI  R30,LOW(238)
0000a6 b9e6      	OUT  0x6,R30
                 ; 0000 009D SFIOR=(1<<ADHSM) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000a7 e1e0      	LDI  R30,LOW(16)
0000a8 bfe0      	OUT  0x30,R30
                 ; 0000 009E 
                 ; 0000 009F // SPI initialization
                 ; 0000 00A0 // SPI disabled
                 ; 0000 00A1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa b9ed      	OUT  0xD,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // TWI initialization
                 ; 0000 00A4 // TWI disabled
                 ; 0000 00A5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000ab bfe6      	OUT  0x36,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Alphanumeric LCD initialization
                 ; 0000 00A8 // Connections are specified in the
                 ; 0000 00A9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00AA // RS: PORTB Bit 0
                 ; 0000 00AB // RD: PORTB Bit 1
                 ; 0000 00AC // EN: PORTB Bit 2
                 ; 0000 00AD // D4: PORTB Bit 4
                 ; 0000 00AE // D5: PORTB Bit 5
                 ; 0000 00AF // D6: PORTB Bit 6
                 ; 0000 00B0 // D7: PORTB Bit 7
                 ; 0000 00B1 // Characters/line: 20
                 ; 0000 00B2 lcd_init(20);
0000ac e1a4      	LDI  R26,LOW(20)
0000ad d0db      	RCALL _lcd_init
                 ; 0000 00B3 lcd_init(20);
0000ae e1a4      	LDI  R26,LOW(20)
0000af d0d9      	RCALL _lcd_init
                 ; 0000 00B4 lcd_gotoxy(0,0);
0000b0 d102      	RCALL SUBOPT_0x0
0000b1 d104      	RCALL SUBOPT_0x1
                 ; 0000 00B5 lcd_puts("Hello");
                +
0000b2 eea0     +LDI R26 , LOW ( _0x4 + ( 0 ) )
0000b3 e0b0     +LDI R27 , HIGH ( _0x4 + ( 0 ) )
                 	__POINTW2MN _0x4,0
0000b4 d0c5      	RCALL _lcd_puts
                 ; 0000 00B6 lcd_gotoxy(0,1);
0000b5 d0fd      	RCALL SUBOPT_0x0
0000b6 d101      	RCALL SUBOPT_0x2
                 ; 0000 00B7 lcd_putchar(0x32);
0000b7 e3a2      	LDI  R26,LOW(50)
0000b8 d0af      	RCALL _lcd_putchar
                 ; 0000 00B8 lcd_clear();
0000b9 d0a0      	RCALL _lcd_clear
                 ; 0000 00B9 delay_ms(200);
0000ba eca8      	LDI  R26,LOW(200)
0000bb d0fe      	RCALL SUBOPT_0x3
                 ; 0000 00BA // Globally enable interrupts
                 ; 0000 00BB #asm("sei")
0000bc 9478      	SEI
                 ; 0000 00BC 
                 ; 0000 00BD while (1)
                 _0x5:
                 ; 0000 00BE {
                 ; 0000 00BF // Place your code here
                 ; 0000 00C0 lcd_gotoxy(0,1);
0000bd d0f5      	RCALL SUBOPT_0x0
0000be d0f9      	RCALL SUBOPT_0x2
                 ; 0000 00C1 lcd_putchar((adc_data[0]/1000)+0x30);
0000bf d0fc      	RCALL SUBOPT_0x4
0000c0 d102      	RCALL SUBOPT_0x5
                 ; 0000 00C2 lcd_gotoxy(1,1);
0000c1 e0e1      	LDI  R30,LOW(1)
0000c2 d104      	RCALL SUBOPT_0x6
                 ; 0000 00C3 lcd_putchar((adc_data[0]%1000)/100+0x30);
0000c3 d0f8      	RCALL SUBOPT_0x4
0000c4 d104      	RCALL SUBOPT_0x7
0000c5 d0fd      	RCALL SUBOPT_0x5
                 ; 0000 00C4 lcd_gotoxy(2,1);
0000c6 e0e2      	LDI  R30,LOW(2)
0000c7 d0ff      	RCALL SUBOPT_0x6
                 ; 0000 00C5 lcd_putchar((adc_data[0]%1000)%100/10+0x30);
0000c8 d0f3      	RCALL SUBOPT_0x4
0000c9 d0ff      	RCALL SUBOPT_0x7
0000ca d103      	RCALL SUBOPT_0x8
0000cb d0f7      	RCALL SUBOPT_0x5
                 ; 0000 00C6 lcd_gotoxy(3,1);
0000cc e0e3      	LDI  R30,LOW(3)
0000cd d0f9      	RCALL SUBOPT_0x6
                 ; 0000 00C7 lcd_putchar((adc_data[0]%1000)%100%10+0x30);
0000ce d0ed      	RCALL SUBOPT_0x4
0000cf d0f9      	RCALL SUBOPT_0x7
0000d0 d0fd      	RCALL SUBOPT_0x8
0000d1 d101      	RCALL SUBOPT_0x9
                 ; 0000 00C8 
                 ; 0000 00C9 lcd_gotoxy(10,1);
0000d2 e0ea      	LDI  R30,LOW(10)
0000d3 d0f3      	RCALL SUBOPT_0x6
                 ; 0000 00CA lcd_putchar((adc_data[1]/1000)+0x30);
0000d4 d102      	RCALL SUBOPT_0xA
0000d5 d0ed      	RCALL SUBOPT_0x5
                 ; 0000 00CB lcd_gotoxy(11,1);
0000d6 e0eb      	LDI  R30,LOW(11)
0000d7 d0ef      	RCALL SUBOPT_0x6
                 ; 0000 00CC lcd_putchar((adc_data[1]%1000)/100+0x30);
0000d8 d0fe      	RCALL SUBOPT_0xA
0000d9 d0ef      	RCALL SUBOPT_0x7
0000da d0e8      	RCALL SUBOPT_0x5
                 ; 0000 00CD lcd_gotoxy(12,1);
0000db e0ec      	LDI  R30,LOW(12)
0000dc d0ea      	RCALL SUBOPT_0x6
                 ; 0000 00CE lcd_putchar((adc_data[1]%1000)%100/10+0x30);
0000dd d0f9      	RCALL SUBOPT_0xA
0000de d0ea      	RCALL SUBOPT_0x7
0000df d0ee      	RCALL SUBOPT_0x8
0000e0 d0e2      	RCALL SUBOPT_0x5
                 ; 0000 00CF lcd_gotoxy(13,1);
0000e1 e0ed      	LDI  R30,LOW(13)
0000e2 d0e4      	RCALL SUBOPT_0x6
                 ; 0000 00D0 lcd_putchar((adc_data[1]%1000)%100%10+0x30);
0000e3 d0f3      	RCALL SUBOPT_0xA
0000e4 d0e4      	RCALL SUBOPT_0x7
0000e5 d0e8      	RCALL SUBOPT_0x8
0000e6 d0ec      	RCALL SUBOPT_0x9
                 ; 0000 00D1 
                 ; 0000 00D2 adc_value[0] = (float)adc_data[0]*5000/1023;
0000e7 91e0 00e6 	LDS  R30,_adc_data
0000e9 91f0 00e7 	LDS  R31,_adc_data+1
0000eb d0f2      	RCALL SUBOPT_0xB
0000ec 93e0 00eb 	STS  _adc_value,R30
0000ee 93f0 00ec 	STS  _adc_value+1,R31
0000f0 9360 00ed 	STS  _adc_value+2,R22
0000f2 9370 00ee 	STS  _adc_value+3,R23
                 ; 0000 00D3 lcd_gotoxy(0,0);
0000f4 d0be      	RCALL SUBOPT_0x0
0000f5 d0c0      	RCALL SUBOPT_0x1
                 ; 0000 00D4 lcd_putchar(((int)adc_value[0]/1000)+0x30);
0000f6 d0f7      	RCALL SUBOPT_0xC
0000f7 d103      	RCALL SUBOPT_0xD
                 ; 0000 00D5 lcd_gotoxy(1,0);
0000f8 e0e1      	LDI  R30,LOW(1)
0000f9 d105      	RCALL SUBOPT_0xE
                 ; 0000 00D6 lcd_putchar(((int)adc_value[0]%1000)/100+0x30);
0000fa d0f3      	RCALL SUBOPT_0xC
0000fb d105      	RCALL SUBOPT_0xF
0000fc d0fe      	RCALL SUBOPT_0xD
                 ; 0000 00D7 lcd_gotoxy(2,0);
0000fd e0e2      	LDI  R30,LOW(2)
0000fe d100      	RCALL SUBOPT_0xE
                 ; 0000 00D8 lcd_putchar(((int)adc_value[0]%1000)%100/10+0x30);
0000ff d0ee      	RCALL SUBOPT_0xC
000100 d100      	RCALL SUBOPT_0xF
000101 d104      	RCALL SUBOPT_0x10
000102 d0f8      	RCALL SUBOPT_0xD
                 ; 0000 00D9 lcd_gotoxy(3,0);
000103 e0e3      	LDI  R30,LOW(3)
000104 d0fa      	RCALL SUBOPT_0xE
                 ; 0000 00DA lcd_putchar(((int)adc_value[0]%1000)%100%10+0x30);
000105 d0e8      	RCALL SUBOPT_0xC
000106 d0fa      	RCALL SUBOPT_0xF
000107 d0fe      	RCALL SUBOPT_0x10
000108 d102      	RCALL SUBOPT_0x11
                 ; 0000 00DB 
                 ; 0000 00DC adc_value[1] = (float)adc_data[1]*5000/1023;
                +
000109 91e0 00e8+LDS R30 , _adc_data + ( 2 )
00010b 91f0 00e9+LDS R31 , _adc_data + ( 2 ) + 1
                 	__GETW1MN _adc_data,2
00010d d0d0      	RCALL SUBOPT_0xB
                +
00010e 93e0 00ef+STS _adc_value + ( 4 ) , R30
000110 93f0 00f0+STS _adc_value + ( 4 ) + 1 , R31
000112 9360 00f1+STS _adc_value + ( 4 ) + 2 , R22
000114 9370 00f2+STS _adc_value + ( 4 ) + 3 , R23
                 	__PUTD1MN _adc_value,4
                 ; 0000 00DD lcd_gotoxy(10,0);
000116 e0ea      	LDI  R30,LOW(10)
000117 d0e7      	RCALL SUBOPT_0xE
                 ; 0000 00DE lcd_putchar(((int)adc_value[1]/1000)+0x30);
000118 d0f6      	RCALL SUBOPT_0x12
000119 d0e1      	RCALL SUBOPT_0xD
                 ; 0000 00DF lcd_gotoxy(11,0);
00011a e0eb      	LDI  R30,LOW(11)
00011b d0e3      	RCALL SUBOPT_0xE
                 ; 0000 00E0 lcd_putchar(((int)adc_value[1]%1000)/100+0x30);
00011c d0f2      	RCALL SUBOPT_0x12
00011d d0e3      	RCALL SUBOPT_0xF
00011e d0dc      	RCALL SUBOPT_0xD
                 ; 0000 00E1 lcd_gotoxy(12,0);
00011f e0ec      	LDI  R30,LOW(12)
000120 d0de      	RCALL SUBOPT_0xE
                 ; 0000 00E2 lcd_putchar(((int)adc_value[1]%1000)%100/10+0x30);
000121 d0ed      	RCALL SUBOPT_0x12
000122 d0de      	RCALL SUBOPT_0xF
000123 d0e2      	RCALL SUBOPT_0x10
000124 d0d6      	RCALL SUBOPT_0xD
                 ; 0000 00E3 lcd_gotoxy(13,0);
000125 e0ed      	LDI  R30,LOW(13)
000126 d0d8      	RCALL SUBOPT_0xE
                 ; 0000 00E4 lcd_putchar(((int)adc_value[1]%1000)%100%10+0x30);
000127 d0e7      	RCALL SUBOPT_0x12
000128 d0d8      	RCALL SUBOPT_0xF
000129 d0dc      	RCALL SUBOPT_0x10
00012a d0e0      	RCALL SUBOPT_0x11
                 ; 0000 00E5 }
00012b cf91      	RJMP _0x5
                 ; 0000 00E6 }
                 _0x8:
00012c cfff      	RJMP _0x8
                 ; .FEND
                 
                 	.DSEG
                 _0x4:
0000e0           	.BYTE 0x6
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00012d 931a      	ST   -Y,R17
00012e 2f1a      	MOV  R17,R26
00012f b3e8      	IN   R30,0x18
000130 70ef      	ANDI R30,LOW(0xF)
000131 2fae      	MOV  R26,R30
000132 2fe1      	MOV  R30,R17
000133 7fe0      	ANDI R30,LOW(0xF0)
000134 2bea      	OR   R30,R26
000135 bbe8      	OUT  0x18,R30
000136 d0e5      	RCALL SUBOPT_0x13
000137 9ac2      	SBI  0x18,2
000138 d0e3      	RCALL SUBOPT_0x13
000139 98c2      	CBI  0x18,2
00013a d0e1      	RCALL SUBOPT_0x13
00013b c075      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00013c 93aa      	ST   -Y,R26
00013d 81a8      	LD   R26,Y
00013e dfee      	RCALL __lcd_write_nibble_G100
00013f 81e8          ld    r30,y
000140 95e2          swap  r30
000141 83e8          st    y,r30
000142 81a8      	LD   R26,Y
000143 dfe9      	RCALL __lcd_write_nibble_G100
                +
000144 ec88     +LDI R24 , LOW ( 200 )
000145 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000146 9701     +SBIW R24 , 1
000147 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000148 9621      	ADIW R28,1
000149 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00014a d0de      	RCALL __SAVELOCR2
00014b 2f1a      	MOV  R17,R26
00014c 810a      	LDD  R16,Y+2
00014d 2fe1      	MOV  R30,R17
00014e e0f0      	LDI  R31,0
00014f 50ed      	SUBI R30,LOW(-__base_y_G100)
000150 4fff      	SBCI R31,HIGH(-__base_y_G100)
000151 81e0      	LD   R30,Z
000152 0fe0      	ADD  R30,R16
000153 2fae      	MOV  R26,R30
000154 dfe7      	RCALL __lcd_write_data
000155 2e50      	MOV  R5,R16
000156 2e41      	MOV  R4,R17
000157 d0d6      	RCALL __LOADLOCR2
000158 9623      	ADIW R28,3
000159 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00015a e0a2      	LDI  R26,LOW(2)
00015b dfe0      	RCALL __lcd_write_data
00015c e0a3      	LDI  R26,LOW(3)
00015d d05c      	RCALL SUBOPT_0x3
00015e e0ac      	LDI  R26,LOW(12)
00015f dfdc      	RCALL __lcd_write_data
000160 e0a1      	LDI  R26,LOW(1)
000161 dfda      	RCALL __lcd_write_data
000162 e0a3      	LDI  R26,LOW(3)
000163 d056      	RCALL SUBOPT_0x3
000164 e0e0      	LDI  R30,LOW(0)
000165 2e4e      	MOV  R4,R30
000166 2e5e      	MOV  R5,R30
000167 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000168 931a      	ST   -Y,R17
000169 2f1a      	MOV  R17,R26
00016a 301a      	CPI  R17,10
00016b f011      	BREQ _0x2000005
00016c 1457      	CP   R5,R7
00016d f030      	BRLO _0x2000004
                 _0x2000005:
00016e d044      	RCALL SUBOPT_0x0
00016f 9443      	INC  R4
000170 2da4      	MOV  R26,R4
000171 dfd8      	RCALL _lcd_gotoxy
000172 301a      	CPI  R17,10
000173 f1e9      	BREQ _0x2080001
                 _0x2000004:
000174 9453      	INC  R5
000175 9ac0      	SBI  0x18,0
000176 2fa1      	MOV  R26,R17
000177 dfc4      	RCALL __lcd_write_data
000178 98c0      	CBI  0x18,0
000179 c037      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00017a d0ac      	RCALL __SAVELOCR4
00017b 019d      	MOVW R18,R26
                 _0x2000008:
00017c 01d9      	MOVW R26,R18
                +
00017d 5f2f     +SUBI R18 , LOW ( - 1 )
00017e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00017f 91ec      	LD   R30,X
000180 2f1e      	MOV  R17,R30
000181 30e0      	CPI  R30,0
000182 f019      	BREQ _0x200000A
000183 2fa1      	MOV  R26,R17
000184 dfe3      	RCALL _lcd_putchar
000185 cff6      	RJMP _0x2000008
                 _0x200000A:
000186 d0a5      	RCALL __LOADLOCR4
000187 9624      	ADIW R28,4
000188 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000189 931a      	ST   -Y,R17
00018a 2f1a      	MOV  R17,R26
00018b b3e7      	IN   R30,0x17
00018c 6fe0      	ORI  R30,LOW(0xF0)
00018d bbe7      	OUT  0x17,R30
00018e 9aba      	SBI  0x17,2
00018f 9ab8      	SBI  0x17,0
000190 9ab9      	SBI  0x17,1
000191 98c2      	CBI  0x18,2
000192 98c0      	CBI  0x18,0
000193 98c1      	CBI  0x18,1
000194 2e71      	MOV  R7,R17
000195 2fe1      	MOV  R30,R17
000196 58e0      	SUBI R30,-LOW(128)
                +
000197 93e0 00f5+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000199 2fe1      	MOV  R30,R17
00019a 54e0      	SUBI R30,-LOW(192)
                +
00019b 93e0 00f6+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00019d e1a4      	LDI  R26,LOW(20)
00019e d01b      	RCALL SUBOPT_0x3
00019f d080      	RCALL SUBOPT_0x14
0001a0 d07f      	RCALL SUBOPT_0x14
0001a1 d07e      	RCALL SUBOPT_0x14
0001a2 e2a0      	LDI  R26,LOW(32)
0001a3 df89      	RCALL __lcd_write_nibble_G100
                +
0001a4 e980     +LDI R24 , LOW ( 400 )
0001a5 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
0001a6 9701     +SBIW R24 , 1
0001a7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
0001a8 e2a8      	LDI  R26,LOW(40)
0001a9 df92      	RCALL __lcd_write_data
0001aa e0a4      	LDI  R26,LOW(4)
0001ab df90      	RCALL __lcd_write_data
0001ac e8a5      	LDI  R26,LOW(133)
0001ad df8e      	RCALL __lcd_write_data
0001ae e0a6      	LDI  R26,LOW(6)
0001af df8c      	RCALL __lcd_write_data
0001b0 dfa9      	RCALL _lcd_clear
                 _0x2080001:
0001b1 9119      	LD   R17,Y+
0001b2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _adc_data:
0000e6           	.BYTE 0x4
                 _input_index_S0000000000:
0000ea           	.BYTE 0x1
                 _adc_value:
0000eb           	.BYTE 0x8
                 __base_y_G100:
0000f3           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 93ea      	ST   -Y,R30
0001b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
0001b6 e0a0      	LDI  R26,LOW(0)
0001b7 cf92      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2:
0001b8 e0a1      	LDI  R26,LOW(1)
0001b9 cf90      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0001ba e0b0      	LDI  R27,0
0001bb c1dd      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0001bc 91a0 00e6 	LDS  R26,_adc_data
0001be 91b0 00e7 	LDS  R27,_adc_data+1
0001c0 eee8      	LDI  R30,LOW(1000)
0001c1 e0f3      	LDI  R31,HIGH(1000)
0001c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
0001c3 d079      	RCALL __DIVW21U
0001c4 5de0      	SUBI R30,-LOW(48)
0001c5 2fae      	MOV  R26,R30
0001c6 cfa1      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0001c7 93ea      	ST   -Y,R30
0001c8 cfef      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
0001c9 d08b      	RCALL __MODW21U
0001ca 01df      	MOVW R26,R30
0001cb e6e4      	LDI  R30,LOW(100)
0001cc e0f0      	LDI  R31,HIGH(100)
0001cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0001ce d086      	RCALL __MODW21U
0001cf 01df      	MOVW R26,R30
0001d0 e0ea      	LDI  R30,LOW(10)
0001d1 e0f0      	LDI  R31,HIGH(10)
0001d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0001d3 d081      	RCALL __MODW21U
0001d4 5de0      	SUBI R30,-LOW(48)
0001d5 2fae      	MOV  R26,R30
0001d6 cf91      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xA:
                +
0001d7 91a0 00e8+LDS R26 , _adc_data + ( 2 )
0001d9 91b0 00e9+LDS R27 , _adc_data + ( 2 ) + 1
                 	__GETW2MN _adc_data,2
0001db eee8      	LDI  R30,LOW(1000)
0001dc e0f3      	LDI  R31,HIGH(1000)
0001dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xB:
0001de 2766      	CLR  R22
0001df 2777      	CLR  R23
0001e0 d0f9      	RCALL __CDF1
                +
0001e1 e0a0     +LDI R26 , LOW ( 0x459C4000 )
0001e2 e4b0     +LDI R27 , HIGH ( 0x459C4000 )
0001e3 e98c     +LDI R24 , BYTE3 ( 0x459C4000 )
0001e4 e495     +LDI R25 , BYTE4 ( 0x459C4000 )
                 	__GETD2N 0x459C4000
0001e5 d121      	RCALL __MULF12
0001e6 01df      	MOVW R26,R30
0001e7 01cb      	MOVW R24,R22
                +
0001e8 e0e0     +LDI R30 , LOW ( 0x447FC000 )
0001e9 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
0001ea e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
0001eb e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
0001ec d168      	RCALL __DIVF21
0001ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0xC:
0001ee 91e0 00eb 	LDS  R30,_adc_value
0001f0 91f0 00ec 	LDS  R31,_adc_value+1
0001f2 9160 00ed 	LDS  R22,_adc_value+2
0001f4 9170 00ee 	LDS  R23,_adc_value+3
0001f6 d0ac      	RCALL __CFD1
0001f7 01df      	MOVW R26,R30
0001f8 eee8      	LDI  R30,LOW(1000)
0001f9 e0f3      	LDI  R31,HIGH(1000)
0001fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xD:
0001fb d054      	RCALL __DIVW21
0001fc 5de0      	SUBI R30,-LOW(48)
0001fd 2fae      	MOV  R26,R30
0001fe cf69      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xE:
0001ff 93ea      	ST   -Y,R30
000200 cfb5      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
000201 d056      	RCALL __MODW21
000202 01df      	MOVW R26,R30
000203 e6e4      	LDI  R30,LOW(100)
000204 e0f0      	LDI  R31,HIGH(100)
000205 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
000206 d051      	RCALL __MODW21
000207 01df      	MOVW R26,R30
000208 e0ea      	LDI  R30,LOW(10)
000209 e0f0      	LDI  R31,HIGH(10)
00020a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00020b d04c      	RCALL __MODW21
00020c 5de0      	SUBI R30,-LOW(48)
00020d 2fae      	MOV  R26,R30
00020e cf59      	RJMP _lcd_putchar
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:31 WORDS
                 SUBOPT_0x12:
                +
00020f 91e0 00ef+LDS R30 , _adc_value + ( 4 )
000211 91f0 00f0+LDS R31 , _adc_value + ( 4 ) + 1
000213 9160 00f1+LDS R22 , _adc_value + ( 4 ) + 2
000215 9170 00f2+LDS R23 , _adc_value + ( 4 ) + 3
                 	__GETD1MN _adc_value,4
000217 d08b      	RCALL __CFD1
000218 01df      	MOVW R26,R30
000219 eee8      	LDI  R30,LOW(1000)
00021a e0f3      	LDI  R31,HIGH(1000)
00021b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
                +
00021c e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00021d 958a     +DEC R24
00021e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
00021f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x14:
000220 e3a0      	LDI  R26,LOW(48)
000221 df0b      	RCALL __lcd_write_nibble_G100
                +
000222 e980     +LDI R24 , LOW ( 400 )
000223 e091     +LDI R25 , HIGH ( 400 )
                +__DELAY_USW_LOOP :
000224 9701     +SBIW R24 , 1
000225 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 400
000226 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
000227 933a      	ST   -Y,R19
                 __SAVELOCR3:
000228 932a      	ST   -Y,R18
                 __SAVELOCR2:
000229 931a      	ST   -Y,R17
00022a 930a      	ST   -Y,R16
00022b 9508      	RET
                 
                 __LOADLOCR4:
00022c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00022d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00022e 8119      	LDD  R17,Y+1
00022f 8108      	LD   R16,Y
000230 9508      	RET
                 
                 __ANEGW1:
000231 95f1      	NEG  R31
000232 95e1      	NEG  R30
000233 40f0      	SBCI R31,0
000234 9508      	RET
                 
                 __ANEGD1:
000235 95f0      	COM  R31
000236 9560      	COM  R22
000237 9570      	COM  R23
000238 95e1      	NEG  R30
000239 4fff      	SBCI R31,-1
00023a 4f6f      	SBCI R22,-1
00023b 4f7f      	SBCI R23,-1
00023c 9508      	RET
                 
                 __DIVW21U:
00023d 2400      	CLR  R0
00023e 2411      	CLR  R1
00023f e190      	LDI  R25,16
                 __DIVW21U1:
000240 0faa      	LSL  R26
000241 1fbb      	ROL  R27
000242 1c00      	ROL  R0
000243 1c11      	ROL  R1
000244 1a0e      	SUB  R0,R30
000245 0a1f      	SBC  R1,R31
000246 f418      	BRCC __DIVW21U2
000247 0e0e      	ADD  R0,R30
000248 1e1f      	ADC  R1,R31
000249 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00024a 60a1      	SBR  R26,1
                 __DIVW21U3:
00024b 959a      	DEC  R25
00024c f799      	BRNE __DIVW21U1
00024d 01fd      	MOVW R30,R26
00024e 01d0      	MOVW R26,R0
00024f 9508      	RET
                 
                 __DIVW21:
000250 d015      	RCALL __CHKSIGNW
000251 dfeb      	RCALL __DIVW21U
000252 f40e      	BRTC __DIVW211
000253 dfdd      	RCALL __ANEGW1
                 __DIVW211:
000254 9508      	RET
                 
                 __MODW21U:
000255 dfe7      	RCALL __DIVW21U
000256 01fd      	MOVW R30,R26
000257 9508      	RET
                 
                 __MODW21:
000258 94e8      	CLT
000259 ffb7      	SBRS R27,7
00025a c004      	RJMP __MODW211
00025b 95b1      	NEG  R27
00025c 95a1      	NEG  R26
00025d 40b0      	SBCI R27,0
00025e 9468      	SET
                 __MODW211:
00025f fdf7      	SBRC R31,7
000260 dfd0      	RCALL __ANEGW1
000261 dfdb      	RCALL __DIVW21U
000262 01fd      	MOVW R30,R26
000263 f40e      	BRTC __MODW212
000264 dfcc      	RCALL __ANEGW1
                 __MODW212:
000265 9508      	RET
                 
                 __CHKSIGNW:
000266 94e8      	CLT
000267 fff7      	SBRS R31,7
000268 c002      	RJMP __CHKSW1
000269 dfc7      	RCALL __ANEGW1
00026a 9468      	SET
                 __CHKSW1:
00026b ffb7      	SBRS R27,7
00026c c006      	RJMP __CHKSW2
00026d 95b1      	NEG  R27
00026e 95a1      	NEG  R26
00026f 40b0      	SBCI R27,0
000270 f800      	BLD  R0,0
000271 9403      	INC  R0
000272 fa00      	BST  R0,0
                 __CHKSW2:
000273 9508      	RET
                 
                 __ROUND_REPACK:
000274 2355      	TST  R21
000275 f442      	BRPL __REPACK
000276 3850      	CPI  R21,0x80
000277 f411      	BRNE __ROUND_REPACK0
000278 ffe0      	SBRS R30,0
000279 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00027a 9631      	ADIW R30,1
00027b 1f69      	ADC  R22,R25
00027c 1f79      	ADC  R23,R25
00027d f06b      	BRVS __REPACK1
                 
                 __REPACK:
00027e e850      	LDI  R21,0x80
00027f 2757      	EOR  R21,R23
000280 f411      	BRNE __REPACK0
000281 935f      	PUSH R21
000282 c073      	RJMP __ZERORES
                 __REPACK0:
000283 3f5f      	CPI  R21,0xFF
000284 f031      	BREQ __REPACK1
000285 0f66      	LSL  R22
000286 0c00      	LSL  R0
000287 9557      	ROR  R21
000288 9567      	ROR  R22
000289 2f75      	MOV  R23,R21
00028a 9508      	RET
                 __REPACK1:
00028b 935f      	PUSH R21
00028c 2000      	TST  R0
00028d f00a      	BRMI __REPACK2
00028e c072      	RJMP __MAXRES
                 __REPACK2:
00028f c06b      	RJMP __MINRES
                 
                 __UNPACK:
000290 e850      	LDI  R21,0x80
000291 2e19      	MOV  R1,R25
000292 2215      	AND  R1,R21
000293 0f88      	LSL  R24
000294 1f99      	ROL  R25
000295 2795      	EOR  R25,R21
000296 0f55      	LSL  R21
000297 9587      	ROR  R24
                 
                 __UNPACK1:
000298 e850      	LDI  R21,0x80
000299 2e07      	MOV  R0,R23
00029a 2205      	AND  R0,R21
00029b 0f66      	LSL  R22
00029c 1f77      	ROL  R23
00029d 2775      	EOR  R23,R21
00029e 0f55      	LSL  R21
00029f 9567      	ROR  R22
0002a0 9508      	RET
                 
                 __CFD1U:
0002a1 9468      	SET
0002a2 c001      	RJMP __CFD1U0
                 __CFD1:
0002a3 94e8      	CLT
                 __CFD1U0:
0002a4 935f      	PUSH R21
0002a5 dff2      	RCALL __UNPACK1
0002a6 3870      	CPI  R23,0x80
0002a7 f018      	BRLO __CFD10
0002a8 3f7f      	CPI  R23,0xFF
0002a9 f408      	BRCC __CFD10
0002aa c04b      	RJMP __ZERORES
                 __CFD10:
0002ab e156      	LDI  R21,22
0002ac 1b57      	SUB  R21,R23
0002ad f4aa      	BRPL __CFD11
0002ae 9551      	NEG  R21
0002af 3058      	CPI  R21,8
0002b0 f40e      	BRTC __CFD19
0002b1 3059      	CPI  R21,9
                 __CFD19:
0002b2 f030      	BRLO __CFD17
0002b3 efef      	SER  R30
0002b4 efff      	SER  R31
0002b5 ef6f      	SER  R22
0002b6 e77f      	LDI  R23,0x7F
0002b7 f977      	BLD  R23,7
0002b8 c01a      	RJMP __CFD15
                 __CFD17:
0002b9 2777      	CLR  R23
0002ba 2355      	TST  R21
0002bb f0b9      	BREQ __CFD15
                 __CFD18:
0002bc 0fee      	LSL  R30
0002bd 1fff      	ROL  R31
0002be 1f66      	ROL  R22
0002bf 1f77      	ROL  R23
0002c0 955a      	DEC  R21
0002c1 f7d1      	BRNE __CFD18
0002c2 c010      	RJMP __CFD15
                 __CFD11:
0002c3 2777      	CLR  R23
                 __CFD12:
0002c4 3058      	CPI  R21,8
0002c5 f028      	BRLO __CFD13
0002c6 2fef      	MOV  R30,R31
0002c7 2ff6      	MOV  R31,R22
0002c8 2f67      	MOV  R22,R23
0002c9 5058      	SUBI R21,8
0002ca cff9      	RJMP __CFD12
                 __CFD13:
0002cb 2355      	TST  R21
0002cc f031      	BREQ __CFD15
                 __CFD14:
0002cd 9576      	LSR  R23
0002ce 9567      	ROR  R22
0002cf 95f7      	ROR  R31
0002d0 95e7      	ROR  R30
0002d1 955a      	DEC  R21
0002d2 f7d1      	BRNE __CFD14
                 __CFD15:
0002d3 2000      	TST  R0
0002d4 f40a      	BRPL __CFD16
0002d5 df5f      	RCALL __ANEGD1
                 __CFD16:
0002d6 915f      	POP  R21
0002d7 9508      	RET
                 
                 __CDF1U:
0002d8 9468      	SET
0002d9 c001      	RJMP __CDF1U0
                 __CDF1:
0002da 94e8      	CLT
                 __CDF1U0:
0002db 9730      	SBIW R30,0
0002dc 4060      	SBCI R22,0
0002dd 4070      	SBCI R23,0
0002de f0b1      	BREQ __CDF10
0002df 2400      	CLR  R0
0002e0 f026      	BRTS __CDF11
0002e1 2377      	TST  R23
0002e2 f412      	BRPL __CDF11
0002e3 9400      	COM  R0
0002e4 df50      	RCALL __ANEGD1
                 __CDF11:
0002e5 2e17      	MOV  R1,R23
0002e6 e17e      	LDI  R23,30
0002e7 2011      	TST  R1
                 __CDF12:
0002e8 f032      	BRMI __CDF13
0002e9 957a      	DEC  R23
0002ea 0fee      	LSL  R30
0002eb 1fff      	ROL  R31
0002ec 1f66      	ROL  R22
0002ed 1c11      	ROL  R1
0002ee cff9      	RJMP __CDF12
                 __CDF13:
0002ef 2fef      	MOV  R30,R31
0002f0 2ff6      	MOV  R31,R22
0002f1 2d61      	MOV  R22,R1
0002f2 935f      	PUSH R21
0002f3 df8a      	RCALL __REPACK
0002f4 915f      	POP  R21
                 __CDF10:
0002f5 9508      	RET
                 
                 __ZERORES:
0002f6 27ee      	CLR  R30
0002f7 27ff      	CLR  R31
0002f8 01bf      	MOVW R22,R30
0002f9 915f      	POP  R21
0002fa 9508      	RET
                 
                 __MINRES:
0002fb efef      	SER  R30
0002fc efff      	SER  R31
0002fd e76f      	LDI  R22,0x7F
0002fe ef7f      	SER  R23
0002ff 915f      	POP  R21
000300 9508      	RET
                 
                 __MAXRES:
000301 efef      	SER  R30
000302 efff      	SER  R31
000303 e76f      	LDI  R22,0x7F
000304 e77f      	LDI  R23,0x7F
000305 915f      	POP  R21
000306 9508      	RET
                 
                 __MULF12:
000307 935f      	PUSH R21
000308 df87      	RCALL __UNPACK
000309 3870      	CPI  R23,0x80
00030a f359      	BREQ __ZERORES
00030b 3890      	CPI  R25,0x80
00030c f349      	BREQ __ZERORES
00030d 2401      	EOR  R0,R1
00030e 9408      	SEC
00030f 1f79      	ADC  R23,R25
000310 f423      	BRVC __MULF124
000311 f324      	BRLT __ZERORES
                 __MULF125:
000312 2000      	TST  R0
000313 f33a      	BRMI __MINRES
000314 cfec      	RJMP __MAXRES
                 __MULF124:
000315 920f      	PUSH R0
000316 931f      	PUSH R17
000317 932f      	PUSH R18
000318 933f      	PUSH R19
000319 934f      	PUSH R20
00031a 2711      	CLR  R17
00031b 2722      	CLR  R18
00031c 2799      	CLR  R25
00031d 9f68      	MUL  R22,R24
00031e 01a0      	MOVW R20,R0
00031f 9f8f      	MUL  R24,R31
000320 2d30      	MOV  R19,R0
000321 0d41      	ADD  R20,R1
000322 1f59      	ADC  R21,R25
000323 9f6b      	MUL  R22,R27
000324 0d30      	ADD  R19,R0
000325 1d41      	ADC  R20,R1
000326 1f59      	ADC  R21,R25
000327 9f8e      	MUL  R24,R30
000328 d027      	RCALL __MULF126
000329 9fbf      	MUL  R27,R31
00032a d025      	RCALL __MULF126
00032b 9f6a      	MUL  R22,R26
00032c d023      	RCALL __MULF126
00032d 9fbe      	MUL  R27,R30
00032e d01d      	RCALL __MULF127
00032f 9faf      	MUL  R26,R31
000330 d01b      	RCALL __MULF127
000331 9fae      	MUL  R26,R30
000332 0d11      	ADD  R17,R1
000333 1f29      	ADC  R18,R25
000334 1f39      	ADC  R19,R25
000335 1f49      	ADC  R20,R25
000336 1f59      	ADC  R21,R25
000337 2fe3      	MOV  R30,R19
000338 2ff4      	MOV  R31,R20
000339 2f65      	MOV  R22,R21
00033a 2f52      	MOV  R21,R18
00033b 914f      	POP  R20
00033c 913f      	POP  R19
00033d 912f      	POP  R18
00033e 911f      	POP  R17
00033f 900f      	POP  R0
000340 2366      	TST  R22
000341 f02a      	BRMI __MULF122
000342 0f55      	LSL  R21
000343 1fee      	ROL  R30
000344 1fff      	ROL  R31
000345 1f66      	ROL  R22
000346 c002      	RJMP __MULF123
                 __MULF122:
000347 9573      	INC  R23
000348 f24b      	BRVS __MULF125
                 __MULF123:
000349 df2a      	RCALL __ROUND_REPACK
00034a 915f      	POP  R21
00034b 9508      	RET
                 
                 __MULF127:
00034c 0d10      	ADD  R17,R0
00034d 1d21      	ADC  R18,R1
00034e 1f39      	ADC  R19,R25
00034f c002      	RJMP __MULF128
                 __MULF126:
000350 0d20      	ADD  R18,R0
000351 1d31      	ADC  R19,R1
                 __MULF128:
000352 1f49      	ADC  R20,R25
000353 1f59      	ADC  R21,R25
000354 9508      	RET
                 
                 __DIVF21:
000355 935f      	PUSH R21
000356 df39      	RCALL __UNPACK
000357 3870      	CPI  R23,0x80
000358 f421      	BRNE __DIVF210
000359 2011      	TST  R1
                 __DIVF211:
00035a f40a      	BRPL __DIVF219
00035b cf9f      	RJMP __MINRES
                 __DIVF219:
00035c cfa4      	RJMP __MAXRES
                 __DIVF210:
00035d 3890      	CPI  R25,0x80
00035e f409      	BRNE __DIVF218
                 __DIVF217:
00035f cf96      	RJMP __ZERORES
                 __DIVF218:
000360 2401      	EOR  R0,R1
000361 9408      	SEC
000362 0b97      	SBC  R25,R23
000363 f41b      	BRVC __DIVF216
000364 f3d4      	BRLT __DIVF217
000365 2000      	TST  R0
000366 cff3      	RJMP __DIVF211
                 __DIVF216:
000367 2f79      	MOV  R23,R25
000368 931f      	PUSH R17
000369 932f      	PUSH R18
00036a 933f      	PUSH R19
00036b 934f      	PUSH R20
00036c 2411      	CLR  R1
00036d 2711      	CLR  R17
00036e 2722      	CLR  R18
00036f 2733      	CLR  R19
000370 01a9      	MOVW R20,R18
000371 e290      	LDI  R25,32
                 __DIVF212:
000372 17ae      	CP   R26,R30
000373 07bf      	CPC  R27,R31
000374 0786      	CPC  R24,R22
000375 0741      	CPC  R20,R17
000376 f030      	BRLO __DIVF213
000377 1bae      	SUB  R26,R30
000378 0bbf      	SBC  R27,R31
000379 0b86      	SBC  R24,R22
00037a 0b41      	SBC  R20,R17
00037b 9408      	SEC
00037c c001      	RJMP __DIVF214
                 __DIVF213:
00037d 9488      	CLC
                 __DIVF214:
00037e 1f55      	ROL  R21
00037f 1f22      	ROL  R18
000380 1f33      	ROL  R19
000381 1c11      	ROL  R1
000382 1faa      	ROL  R26
000383 1fbb      	ROL  R27
000384 1f88      	ROL  R24
000385 1f44      	ROL  R20
000386 959a      	DEC  R25
000387 f751      	BRNE __DIVF212
000388 01f9      	MOVW R30,R18
000389 2d61      	MOV  R22,R1
00038a 914f      	POP  R20
00038b 913f      	POP  R19
00038c 912f      	POP  R18
00038d 911f      	POP  R17
00038e 2366      	TST  R22
00038f f032      	BRMI __DIVF215
000390 0f55      	LSL  R21
000391 1fee      	ROL  R30
000392 1fff      	ROL  R31
000393 1f66      	ROL  R22
000394 957a      	DEC  R23
000395 f24b      	BRVS __DIVF217
                 __DIVF215:
000396 dedd      	RCALL __ROUND_REPACK
000397 915f      	POP  R21
000398 9508      	RET
                 
                 _delay_ms:
000399 9610      	adiw r26,0
00039a f039      	breq __delay_ms1
                 __delay_ms0:
00039b 95a8      	wdr
                +
00039c ea80     +LDI R24 , LOW ( 0xFA0 )
00039d e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00039e 9701     +SBIW R24 , 1
00039f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
0003a0 9711      	sbiw r26,1
0003a1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003a2 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8535 register use summary:
r0 :  30 r1 :  22 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:  31 r18:  18 r19:  15 r20:  14 r21:  48 r22:  39 r23:  38 
r24:  31 r25:  31 r26:  75 r27:  24 r28:   4 r29:   1 r30: 178 r31:  54 
x  :   6 y  :  33 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega8535 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :   8 
adiw  :   5 and   :   2 andi  :   2 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  11 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   2 brmi  :   5 brne  :  18 brpl  :   5 brsh  :   0 brtc  :   3 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   1 cbi   :   5 
cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 clr   :  18 
cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   4 cp    :   2 
cpc   :   3 cpi   :  15 cpse  :   0 dec   :   9 des   :   0 eor   :   5 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   5 
inc   :   4 ld    :  13 ldd   :   4 ldi   : 105 lds   :  19 lpm   :   7 
lsl   :  12 lsr   :   1 mov   :  40 movw  :  21 mul   :   9 muls  :   0 
mulsu :   0 neg   :   8 nop   :   0 or    :   1 ori   :   1 out   :  45 
pop   :  16 push  :  15 rcall : 146 ret   :  37 reti  :   1 rjmp  :  60 
rol   :  26 ror   :   7 sbc   :   5 sbci  :  10 sbi   :   6 sbic  :   0 
sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   1 sbrs  :   4 sec   :   3 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   4 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  23 std   :   0 
sts   :  12 sub   :   3 subi  :  11 swap  :   1 tst   :  12 wdr   :   1 

Instructions used: 71 out of 114 (62.3%)

ATmega8535 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000746   1822     40   1862    8192  22.7%
[.dseg] 0x000060 0x0000f7      0     23     23     512   4.5%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
